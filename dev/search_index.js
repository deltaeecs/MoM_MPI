var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [MoM_Kernels, MoM_Basics]","category":"page"},{"location":"api/#MoM_Kernels.MLFMAParams","page":"API","title":"MoM_Kernels.MLFMAParams","text":"多层快速多极子的可调参数\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Kernels.SSCg","page":"API","title":"MoM_Kernels.SSCg","text":"计算面奇异性时用的两个系数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Kernels.SSCgdivnp2","page":"API","title":"MoM_Kernels.SSCgdivnp2","text":"计算体奇异性时用到的一些系数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Kernels.VSC₃ⁿ","page":"API","title":"MoM_Kernels.VSC₃ⁿ","text":"这一项面、体奇异性都用到了，处理对格林函数梯度求积时的奇异性时用到的。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Kernels.CubeInfo","page":"API","title":"MoM_Kernels.CubeInfo","text":"盒子信息，包括 子层盒子id的区间、 包含的基函数区间、 非空子盒子在8个子盒子中的id等、 包含的网格如三角形、四面体的id，以基函数进行分，因此边界上的同一个网格可能被分到不同的盒子内。 邻盒子的id、远亲盒子的id、本盒子在本层的三维整数坐标、本盒子在本层的三维全局坐标\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.GLPolesInfo","page":"API","title":"MoM_Kernels.GLPolesInfo","text":"多极子的极信息，即角谱空间采样信息 Xθs::Vector{FT}，θ方向的采样点坐标（rad单位），高斯-勒让德求积 Xϕs::Vector{FT}，ϕ方向的采样点坐标（rad单位），均值求积 Wθϕs::Vector{FT}，采样点权重，用于积分时使用，在MLFMA中直接乘在转移项\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.LagrangeInterp1StepInfo","page":"API","title":"MoM_Kernels.LagrangeInterp1StepInfo","text":"保存总的 稀疏插值矩阵，用于单步插值，根据稀疏度决定保存稀疏阵或是稠密阵 θϕCSC       ::AbstractMatrix{FT} 稀疏矩阵, θ 方向插值矩阵的转置，用于左乘本层多极子矩阵，在 θ 方向反插值 θϕCSCT      ::AbstractMatrix{FT} 稀疏矩阵, ϕ 方向插值矩阵的转置，用于左乘本层多极子矩阵，在 ϕ 方向反插值\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.LagrangeInterp1StepInfo-Union{Tuple{IT}, Tuple{FT}, Tuple{SparseArrays.SparseMatrixCSC{FT, IT}, SparseArrays.SparseMatrixCSC{FT, IT}}} where {FT<:Real, IT}","page":"API","title":"MoM_Kernels.LagrangeInterp1StepInfo","text":"带参数的构造函数\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.LagrangeInterpInfo","page":"API","title":"MoM_Kernels.LagrangeInterpInfo","text":"保存 θ, ϕ 两个方向的稀疏插值矩阵， θ方向为 (npXθs, ntXθs) 稀疏矩阵, 用于左乘本层多极子矩阵，在 θ 方向插值 ϕ方向为 (ntXϕs, ntXϕs) 稀疏矩阵, 用于右乘本层多极子矩阵，在 ϕ 方向插值 θCSCT   ::SparseMatrixCSC{FT} 稀疏矩阵, θ 方向插值矩阵的转置，用于左乘本层多极子矩阵，在 θ 方向反插值 ϕCSCT   ::SparseMatrixCSC{FT} 稀疏矩阵, ϕ 方向插值矩阵的转置，用于左乘本层多极子矩阵，在 ϕ 方向反插值\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.LagrangeInterpInfo-Union{Tuple{IT}, Tuple{FT}, Tuple{SparseArrays.SparseMatrixCSC{FT, IT}, SparseArrays.SparseMatrixCSC{FT, IT}}} where {FT<:Real, IT}","page":"API","title":"MoM_Kernels.LagrangeInterpInfo","text":"带参数的构造函数\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.LevelInfo","page":"API","title":"MoM_Kernels.LevelInfo","text":"层信息 ID          ::IT，层序号 L           ::IT, 本层截断项数 cubes       ::Vector{CubeInfo{IT, FT}} 包含每一个盒子信息的向量 cubeEdgel   ::FT，本层盒子的边长 poles       ::PolesInfo{IT, FT}, 多极子采样信息 interpWθϕ   ::InterpInfo{IT, FT}, 插值信息 aggS        ::Array{Complex{FT}, 3}， 聚合项 disaggG     ::Array{Complex{FT}, 3}， 解聚项 phaseShift2Kids  ::Array{Complex{FT}, 3}，本层盒子到子层盒子的相移因子  αTrans      ::Array{Complex{FT}, 3}， 本层盒子远亲组之间的转移因子，根据相对位置共有 7^3 - 3^3 = 316 个 αTransIndex ::Array{IT, 2}, 远亲盒子的相对位置到其转移因子在所有转移因子数组的索引\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.MLFMAParamsType","page":"API","title":"MoM_Kernels.MLFMAParamsType","text":"创建可变参数类型以在频率更改时对应更改 MLFMA 的相关参数\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.MLMFAIterator","page":"API","title":"MoM_Kernels.MLMFAIterator","text":"保存 MLFMA 相关信息的结构体\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.MLMFAIterator-Union{Tuple{LT}, Tuple{FT}, Tuple{Any, MoM_Kernels.OctreeInfo{FT, LT}, Vector, Vector}} where {FT<:Real, LT<:MoM_Kernels.LevelInfo}","page":"API","title":"MoM_Kernels.MLMFAIterator","text":"实现矩阵向量乘积，并封装为线性算子\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.MatrixChunk","page":"API","title":"MoM_Kernels.MatrixChunk","text":"创建近场矩阵块结构体，所包含的数据为某一盒子内的近场矩阵元\n\nm::Int，行数\nn::Int，列数\nmat::Matrix{T}，矩阵\nrowIndices::AbstractVector{Int}，行索引\ncolIndices::AbstractVector{Int}，列索引\nlmul::AbstractVector{T}，用于左乘其它矩阵、向量的临时数组，大小与列数相同\nrmul::AbstractVector{T}，用于右乘其它矩阵、向量的临时数组，大小与行数相同\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.OctreeInfo","page":"API","title":"MoM_Kernels.OctreeInfo","text":"八叉树类 nLevels ::Integer, 叶层ID（定义大盒子为（“0” 层），叶层为第“n”层，nLevels取“n”的值） leafCubeEdgel::FT，叶层盒子边长 bigCubeLowerCoor::MVec3D{FT}，第0层盒子的角坐标 levels  ::Dict{Int, LevelInfo}，保存各层信息的字典\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.OctreeInfo-Union{Tuple{LT}, Tuple{FT}, Tuple{Matrix{FT}, FT}} where {FT<:Real, LT<:MoM_Kernels.AbstractLevel}","page":"API","title":"MoM_Kernels.OctreeInfo","text":"构建八叉树类\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.PartitionedVector","page":"API","title":"MoM_Kernels.PartitionedVector","text":"struct PartitionedVector{T} <: AbstractVector{T}     length::Int     data::OffsetVector{T, Vector{T}}     indices::UnitRange{Int}     ghostdata::SparseVector{T, Int}     ghostindices::Vector{T, Int} end\n\n用于保存向量块，同时在块内保存一些其他块的数据。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.ZnearChunksStruct","page":"API","title":"MoM_Kernels.ZnearChunksStruct","text":"创建近场矩阵结构体，所包含的数据为所有盒子内的近场矩阵元，多线程版本\n\nm::Int，行数\nn::Int，列数\nnChunks::Int，矩阵块儿数\nchunks::Vector{ZnearChunksStruct{T}}，矩阵\nlmul::Vector{T}，用于左乘其它矩阵、向量的临时数组，大小与列数相同\nlmuld::Vector{T}，用于左乘其它矩阵、向量的临时分布式数组，大小与列数相同，默认不分配\nrmul::Vector{T}，用于右乘其它矩阵、向量的临时数组，大小与行数相同\nlmuld::Vector{T}，用于左乘其它矩阵、向量的临时分布式数组，大小与列数相同，默认不分配\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Kernels.ZnearChunksStruct-Union{Tuple{Any}, Tuple{T}} where T<:Number","page":"API","title":"MoM_Kernels.ZnearChunksStruct","text":"ZnearChunksStruct 类的初始化函数，将 lumld 和 rmuld 初始化为\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.mmulvStruct","page":"API","title":"MoM_Kernels.mmulvStruct","text":"存储分布式矩阵向量乘积结果的数组\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.:*-Union{Tuple{T}, Tuple{AbstractMatrix, T}} where T<:MoM_Kernels.MatrixChunk","page":"API","title":"Base.:*","text":"实现右乘其它矩阵，默认矩阵块较小，不在本阶段并行\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:*-Union{Tuple{T}, Tuple{AbstractVector, T}} where T<:MoM_Kernels.MatrixChunk","page":"API","title":"Base.:*","text":"实现右乘其它向量，默认矩阵块较小，不在本阶段并行\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:*-Union{Tuple{T}, Tuple{MoM_Kernels.ZNEARCHUNK{T}, AbstractMatrix}} where T<:Number","page":"API","title":"Base.:*","text":"实现左乘其它矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:*-Union{Tuple{T}, Tuple{T, AbstractMatrix}} where T<:MoM_Kernels.MatrixChunk","page":"API","title":"Base.:*","text":"实现左乘其它矩阵，默认矩阵块较小，不在本阶段并行\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:*-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:MoM_Kernels.MatrixChunk","page":"API","title":"Base.:*","text":"实现左乘其它向量，默认矩阵块较小，不在本阶段并行\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:*-Union{Tuple{T}, Tuple{T, AbstractVector}} where T<:MoM_Kernels.ZnearChunksStruct","page":"API","title":"Base.:*","text":"实现左乘其它向量\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{LTo}, Tuple{LTt}, Tuple{FT}, Tuple{Type{MoM_Kernels.OctreeInfo{FT, LTt}}, MoM_Kernels.OctreeInfo{FT, LTo}}} where {FT<:Real, LTt<:MoM_Kernels.AbstractLevel, LTo<:MoM_Kernels.AbstractLevel}","page":"API","title":"Base.convert","text":"实现包含分布式层的\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.eltype-Tuple{IncompleteLU.ILUFactorization}","page":"API","title":"Base.eltype","text":"提供 ilu 的算子 eltype 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Union{Tuple{I}, Tuple{PartitionedVector, I}} where I<:Integer","page":"API","title":"Base.getindex","text":"Base.getindex(A::PartitionedVector, i::I) where {I<:Integer}\n\n重载 getindex.\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T<:MoM_Kernels.MatrixChunk","page":"API","title":"Base.getindex","text":"重载 getindex 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Union{Tuple{T}, Tuple{T, Int64, Int64}} where T<:MoM_Kernels.ZNEARCHUNK","page":"API","title":"Base.getindex","text":"重载 getindex 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.getindex-Union{Tuple{T}, Tuple{T, Int64}} where T<:MoM_Kernels.mmulvStruct","page":"API","title":"Base.getindex","text":"重载 getindex 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Union{Tuple{T}, Tuple{T, Any, Int64, Int64}} where T<:MoM_Kernels.MatrixChunk","page":"API","title":"Base.setindex!","text":"重载 setindex! 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Union{Tuple{T}, Tuple{T, Any, Int64, Int64}} where T<:MoM_Kernels.ZNEARCHUNK","page":"API","title":"Base.setindex!","text":"重载 setindex! 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.setindex!-Union{Tuple{T}, Tuple{T, Any, Int64}} where T<:MoM_Kernels.mmulvStruct","page":"API","title":"Base.setindex!","text":"重载 setindex! 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.size-Tuple{T} where T<:IncompleteLU.ILUFactorization","page":"API","title":"Base.size","text":"提供 ilu 的算子 size 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.size-Union{Tuple{I}, Tuple{T}, Tuple{T, I}} where {T<:IncompleteLU.ILUFactorization, I<:Integer}","page":"API","title":"Base.size","text":"提供 ilu 的算子 size 函数\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.ldiv!-Union{Tuple{T}, Tuple{AbstractVector, SAIChunkPrec{T}, AbstractVector}} where T","page":"API","title":"LinearAlgebra.ldiv!","text":"y .= M * x\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.ldiv!-Union{Tuple{T}, Tuple{AbstractVector, SAIPrec{T}, AbstractVector}} where T","page":"API","title":"LinearAlgebra.ldiv!","text":"y .= M * x\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.ldiv!-Union{Tuple{T}, Tuple{SAIChunkPrec{T}, AbstractVector}} where T","page":"API","title":"LinearAlgebra.ldiv!","text":"x .= M * x\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.ldiv!-Union{Tuple{T}, Tuple{SAIPrec{T}, AbstractVector}} where T","page":"API","title":"LinearAlgebra.ldiv!","text":"x .= M * x\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.mul!-Tuple{AbstractVector, MLMFAIterator, AbstractVector, Number, Number}","page":"API","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(y, Zopt::MLMFAIterator, x)\n\n重载以实现矩阵向量乘积计算\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.mul!-Tuple{Any, MLMFAIterator, Any}","page":"API","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(y, Zopt::MLMFAIterator, x)\n\n重载以实现矩阵向量乘积计算\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.mul!-Union{Tuple{V}, Tuple{T}, Tuple{AbstractVector, LinearAlgebra.Adjoint{T, MLMFAIterator{T, V}}, AbstractVector, Number, Number}} where {T, V}","page":"API","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(y, Zopt::MLMFAIterator, x)\n\n重载以实现矩阵向量乘积计算\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.mul!-Union{Tuple{V}, Tuple{T}, Tuple{Any, LinearAlgebra.Adjoint{T, MLMFAIterator{T, V}}, Any}} where {T, V}","page":"API","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(y, Zopt::MLMFAIterator, x)\n\n重载以实现矩阵向量乘积计算\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.CFIEOnNearTris-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.CFIEOnNearTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形不重合但相隔较近的情况，因此输入有两个个三角形信息类型实例 输入 trit， tris     :   TriangleInfo, 场三角形和源三角形\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.CFIEOnTris-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.CFIEOnTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形不重合且相隔较远的情况，因此输入有两个个三角形信息类型实例 输入 trit， tris     :   TriangleInfo, 场三角形和源三角形\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.CFIEOnTris-Union{Tuple{TriangleInfo{IT, FT}}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.CFIEOnTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形重合的情况，因此输入只有一个三角形信息类型实例 输入 tri     :   TriangleInfo\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexaPWC-Union{Tuple{HexahedraInfo{IT, FT, CT}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexaPWC","text":"采用 PWC 基函数 计算六面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体重合的情况，因此输入有一个六面体信息类型实例 输入： hexat   HexahedraInfo, 场六面体和六面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为与两两作用不同，此处加上了 κ 项，因此后续填充时不需加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexaPWCSepPV-Union{Tuple{HexahedraInfo{IT, FT, CT}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexaPWCSepPV","text":"采用 PWC 基函数 计算六面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体重合的情况，因此输入有一个六面体信息类型实例 输入： hexat   HexahedraInfo, 场六面体和六面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为与两两作用不同，此处加上了 κ 项，因此后续填充时不需加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexaRBF-Union{Tuple{HexahedraInfo{IT, FT, CT}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexaRBF","text":"计算六面体上相关的 36 个阻抗矩阵元， 此函数方法用于计算场源六面体重合的情况，因此输入有一个六面体信息类型实例 输入 hexat     :   HexahedraInfo, 场六面体和源六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexaTetraPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexaTetraPWC","text":"采用 PWC 基函数 计算六面体和四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况，因此输入有两个六面体信息类型实例 输入： hexat::HexahedraInfo,   场六面体 tetras::TetrahedraInfo  源四面体 计算： jk₀η₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexaTetraPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexaTetraPWC","text":"采用 PWC 基函数 计算六面体和四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况，因此输入有两个六面体信息类型实例 输入： tetrat::TetrahedraInfo  场四面体 hexas::HexahedraInfo,   源六面体 计算： jk₀η₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexasPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexasPWC","text":"采用 PWC 基函数 计算六面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况，因此输入有两个六面体信息类型实例 输入： hexat  hexas     :   HexahedraInfo, 场六面体和六面体 计算： jk₀η₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnHexasRBF-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnHexasRBF","text":"计算六面体上相关的 36 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况，因此输入有两个六面体信息类型实例 输入 hexat, hexas     :   HexahedraInfo, 场六面体和源六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearHexaTetraPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearHexaTetraPWC","text":"采用 PWC 基函数 计算六面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较近的情况，因此输入有两个六面体信息类型实例 输入： hexat  hexas     :   HexahedraInfo, 场六面体和六面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearHexaTetraPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearHexaTetraPWC","text":"采用 PWC 基函数 计算六面体和四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况，因此输入有两个六面体信息类型实例 输入： tetrat::TetrahedraInfo  场四面体 hexas::HexahedraInfo,   源六面体 计算： jk₀η₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearHexasPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearHexasPWC","text":"采用 PWC 基函数 计算六面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较近的情况，因此输入有两个六面体信息类型实例 输入： hexat  hexas     :   HexahedraInfo, 场六面体和六面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearHexasRBF-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearHexasRBF","text":"计算六面体上相关的 36 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合但相隔较近的情况，输入有两个六面体信息类型实例 输入 hexat, hexas     :   HexahedraInfo, 场六面体和源六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, VT}} where {IT<:Integer, FT<:AbstractFloat, VT<:HexahedraInfo}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGPWC","text":"计算三角形和六面体上相关的 9 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较近的情况 输入 trit    ::  TriangleInfo,  场三角形面体 geos    ::  HexahedraInfo, 源六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, VT}} where {IT<:Integer, FT<:AbstractFloat, VT<:VolumeCellType}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGPWC","text":"计算三角形和四面体上相关的 9 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较近的情况 输入 trit    ::  TriangleInfo,  场三角形面体 geos    ::  TetrahedraInfo, TetrahedraInfo, 源四面体、四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{VT, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, VT<:HexahedraInfo}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGPWC","text":"计算三角形和六面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 geot    ::  HexahedraInfo, 场六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{VT, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, VT<:VolumeCellType}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGPWC","text":"计算三角形和四面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 geot    ::  TetrahedraInfo, TetrahedraInfo, 场四面体、四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGRBF-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGRBF","text":"计算三角形和六面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 hexat  ::  HexahedraInfo, 场六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGRBF-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGRBF","text":"计算三角形和六面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较近的情况 输入 tris    ::  TriangleInfo,  源三角形面体 hexat  ::  HexahedraInfo, 场六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGSWG-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGSWG","text":"计算三角形和四面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 tetrat  ::  TetrahedraInfo, 场四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearRWGSWG-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearRWGSWG","text":"计算三角形和四面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较近的情况 输入 tris    ::  TriangleInfo,  源三角形面体 tetrat  ::  TetrahedraInfo, 场四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearTetrasPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearTetrasPWC","text":"采用 PWC 基函数 计算四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较近的情况，因此输入有两个四面体信息类型实例 输入： tetrat  tetras     :   TetrahedraInfo, 场四面体和四面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearTetrasSWG-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnNearTetrasSWG","text":"计算四面体上相关的 16 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合但相隔较近的情况，输入有两个四面体信息类型实例 输入 tetrat, tetras     :   TetrahedraInfo, 场四面体和源四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnNearTris-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.EFIEOnNearTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形不重合但相隔较近的情况，因此输入有两个个三角形信息类型实例 输入 trit， tris     :   TriangleInfo, 场三角形和源三角形\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, VT}} where {IT<:Integer, FT<:AbstractFloat, VT<:HexahedraInfo}","page":"API","title":"MoM_Kernels.EFIEOnRWGPWC","text":"计算三角形和六面体上相关的 9 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况 输入 trit    ::  TriangleInfo,  场三角形面体 geos    ::  HexahedraInfo, 源六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, VT}} where {IT<:Integer, FT<:AbstractFloat, VT<:TetrahedraInfo}","page":"API","title":"MoM_Kernels.EFIEOnRWGPWC","text":"计算三角形和四面体上相关的 9 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况 输入 trit    ::  TriangleInfo,  场三角形面体 geos    ::  TetrahedraInfo, 源四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{VT, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, VT<:HexahedraInfo}","page":"API","title":"MoM_Kernels.EFIEOnRWGPWC","text":"计算三角形和六面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 geot    ::  HexahedraInfo, 场六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGPWC-Union{Tuple{VT}, Tuple{FT}, Tuple{IT}, Tuple{VT, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, VT<:VolumeCellType}","page":"API","title":"MoM_Kernels.EFIEOnRWGPWC","text":"计算三角形和四面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 geot    ::  TetrahedraInfo, TetrahedraInfo, 场四面体、四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGRBF-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraInfo{IT, FT, CT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnRWGRBF","text":"计算三角形和六面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 hexat  ::  HexahedraInfo, 场六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGRBF-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnRWGRBF","text":"计算三角形和六面体上相关的 18 个阻抗矩阵元， 此函数方法用于计算场源六面体不重合且相隔较远的情况 输入 trit    ::  TriangleInfo,  场三角形面体 hexas   ::  HexahedraInfo, 源六面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGSWG-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnRWGSWG","text":"计算三角形和四面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 tetrat  ::  TetrahedraInfo, 场四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnRWGSWG-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnRWGSWG","text":"计算三角形和四面体上相关的 12 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况 输入 tris    ::  TriangleInfo,  源三角形面体 tetrat  ::  TetrahedraInfo, 场四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTetraPWC-Union{Tuple{TetrahedraInfo{IT, FT, CT}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnTetraPWC","text":"采用 PWC 基函数 计算四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源四面体重合的情况，因此输入有一个四面体信息类型实例 输入： tetrat   TetrahedraInfo, 场四面体和四面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为与两两作用不同，此处加上了 κ 项，因此后续填充时不需加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTetraPWCSepPV-Union{Tuple{TetrahedraInfo{IT, FT, CT}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnTetraPWCSepPV","text":"采用 PWC 基函数 计算四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源四面体重合的情况，因此输入有一个四面体信息类型实例 输入： tetrat   TetrahedraInfo, 场四面体和四面体 计算： jkη₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 其中， ∫ₜ∫ₛ∇∇G(R)dV′dV = ∫ₜ∑ᵢn̂ᵢ(∫ᵢR̂(jk + 1/R)G(R)dS′)dV 计算得到结果为并矢:: jη₀/k ∫∫ (k²I + ∇∇)G(R) dV'dV Kᵣⁿ  =   ∫ Rⁿ dV' K̂ᵣⁿ  =   ∫ R̂Rⁿ dV' 注意为与两两作用不同，函数将主值积分分开返回以便它用\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTetraSWG-Union{Tuple{TetrahedraInfo{IT, FT, CT}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnTetraSWG","text":"计算四面体上相关的 16 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况，因此输入有两个四面体信息类型实例 输入 tetrat, tetras     :   TetrahedraInfo, 场四面体和源四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTetrasPWC-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnTetrasPWC","text":"采用 PWC 基函数 计算四面体上相关的9个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况，因此输入有两个四面体信息类型实例 输入： tetrat  tetras     :   TetrahedraInfo, 场四面体和四面体 计算： jk₀η₀∫ₜ∫ₛ(I + 1/k²∇∇)G(R)dV′dV 注意为方便对称性快速填充矩阵元，没有加入 κ 项，因此后续填充时要注意加上。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTetrasSWG-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{TetrahedraInfo{IT, FT, CT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.EFIEOnTetrasSWG","text":"计算四面体上相关的 16 个阻抗矩阵元， 此函数方法用于计算场源四面体不重合且相隔较远的情况，因此输入有两个四面体信息类型实例 输入 tetrat, tetras     :   TetrahedraInfo, 场四面体和源四面体\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTris-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.EFIEOnTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形不重合且相隔较远的情况，因此输入有两个个三角形信息类型实例 输入 trit， tris     :   TriangleInfo, 场三角形和源三角形\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.EFIEOnTris-Union{Tuple{TriangleInfo{IT, FT}}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.EFIEOnTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形重合的情况，因此输入只有一个三角形信息类型实例 输入 tri     :   TriangleInfo\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.MFIEOnNearTris-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.MFIEOnNearTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形不重合但相隔较近的情况，因此输入有两个个三角形信息类型实例 输入 trit， tris     :   TriangleInfo, 场三角形和源三角形\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.MFIEOnTris-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleInfo{IT, FT}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.MFIEOnTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形不重合且相隔较远的情况，因此输入有两个个三角形信息类型实例 输入 trit， tris     :   TriangleInfo, 场三角形和源三角形\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.MFIEOnTris-Union{Tuple{TriangleInfo{IT, FT}}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Kernels.MFIEOnTris","text":"计算三角形上相关9个阻抗矩阵元， 此函数方法用于计算场源三角形重合的情况，因此输入只有一个三角形信息类型实例 输入 tri     :   TriangleInfo\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.RCSPlot-Union{Tuple{FT}, Tuple{Any, Any, Matrix{FT}, Matrix{FT}}} where FT<:Real","page":"API","title":"MoM_Kernels.RCSPlot","text":"RCS 绘图\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.ZnearChunkMulIVec!-Tuple{Any, Any, Any}","page":"API","title":"MoM_Kernels.ZnearChunkMulIVec!","text":"计算某一块的矩阵向量乘积\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_agg2HighLevel!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.adjoint_agg2HighLevel!","text":"从子层聚合到本层 tLevel :: 本层 kLevel :: 子层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_agg2Level2!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.adjoint_agg2Level2!","text":"从叶层聚合到第 '2' 层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_aggOnBF!-Union{Tuple{T}, Tuple{Any, Any, AbstractArray{T}}} where T<:Number","page":"API","title":"MoM_Kernels.adjoint_aggOnBF!","text":"在叶层从基函数向盒子聚合\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_disagg2KidLevel!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.adjoint_disagg2KidLevel!","text":"向低层解聚 tLevel :: 本层 kLevel :: 子层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_disagg2LeafLevel!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.adjoint_disagg2LeafLevel!","text":"解聚到叶层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_disaggOnBF!-Tuple{Any, Any, Any}","page":"API","title":"MoM_Kernels.adjoint_disaggOnBF!","text":"在叶层往测试基函数解聚\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_transOnLevel!-Tuple{Any}","page":"API","title":"MoM_Kernels.adjoint_transOnLevel!","text":"层内转移\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.adjoint_transOnLevels!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.adjoint_transOnLevels!","text":"各层内转移\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.agg2HighLevel!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.agg2HighLevel!","text":"从子层聚合到本层 tLevel :: 本层 kLevel :: 子层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.agg2HighLevel!-Union{Tuple{IPT}, Tuple{FT}, Tuple{IT}, Tuple{Any, MoM_Kernels.LevelInfo{IT, FT, IPT}}} where {IT, FT, IPT<:MoM_Kernels.LagrangeInterpInfo}","page":"API","title":"MoM_Kernels.agg2HighLevel!","text":"从子层聚合到本层 tLevel :: 本层 kLevel :: 子层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.agg2Level2!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.agg2Level2!","text":"从叶层聚合到第 '2' 层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggOnBF!-Union{Tuple{T}, Tuple{Any, Any, AbstractArray{T}}} where T<:Number","page":"API","title":"MoM_Kernels.aggOnBF!","text":"在叶层从基函数向盒子聚合\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevel!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Any, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:PWC}","page":"API","title":"MoM_Kernels.aggSBFOnLevel!","text":"计算某层聚合项, 输入为六面体信息和 PWC 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevel!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Any, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:PWC}","page":"API","title":"MoM_Kernels.aggSBFOnLevel!","text":"计算某层聚合项, 输入为四面体信息和 PWC 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevel!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Any, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:SWG}","page":"API","title":"MoM_Kernels.aggSBFOnLevel!","text":"计算某层聚合项, 输入为四面体信息和 SWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevel!-Union{Tuple{BFT}, Tuple{VT}, Tuple{Any, Any, Any, AbstractVector{VT}, Type{BFT}}} where {VT<:HexahedraInfo, BFT<:RBF}","page":"API","title":"MoM_Kernels.aggSBFOnLevel!","text":"计算某层聚合项, 输入为六面体信息和 RBF 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevel-Union{Tuple{BFT}, Tuple{VT}, Tuple{LT}, Tuple{LT, AbstractVector{VT}, AbstractVector{BFT}}} where {LT<:MoM_Kernels.LevelInfo, VT<:VolumeCellType, BFT<:BasisFunctionType}","page":"API","title":"MoM_Kernels.aggSBFOnLevel","text":"计算某层聚合项, 输入为四面体信息和 SWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevelCFIE!-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Any, Array{TriangleInfo{IT, FT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, BFT<:RWG}","page":"API","title":"MoM_Kernels.aggSBFOnLevelCFIE!","text":"计算某层聚合项, 输入为三角形信息和 RWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevelCFIE-Union{Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, Any}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.aggSBFOnLevelCFIE","text":"计算某层聚合项, 输入为三角形信息和 RWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevelEFIE!-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Any, Array{TriangleInfo{IT, FT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, BFT<:RWG}","page":"API","title":"MoM_Kernels.aggSBFOnLevelEFIE!","text":"计算某层聚合项, 输入为三角形信息和 RWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevelEFIE-Union{Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, Any}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.aggSBFOnLevelEFIE","text":"计算某层聚合项, 输入为三角形信息和 RWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevelMFIE!-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Any, Array{TriangleInfo{IT, FT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, BFT<:RWG}","page":"API","title":"MoM_Kernels.aggSBFOnLevelMFIE!","text":"计算某层聚合项, 输入为三角形信息和 RWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.aggSBFOnLevelMFIE-Union{Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, Array{RWG{IT, FT}, 1}}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.aggSBFOnLevelMFIE","text":"计算某层聚合项, 输入为三角形信息和 RWG 基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.anterpolate!-Union{Tuple{FT}, Tuple{IT}, Tuple{AbstractArray, MoM_Kernels.LagrangeInterp1StepInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.anterpolate!","text":"拉格朗日单步反插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.anterpolate!-Union{Tuple{FT}, Tuple{IT}, Tuple{AbstractArray, MoM_Kernels.LagrangeInterpInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.anterpolate!","text":"拉格朗日分步反插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.anterpolate-Union{Tuple{FT}, Tuple{IT}, Tuple{MoM_Kernels.LagrangeInterp1StepInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.anterpolate","text":"拉格朗日单步反插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.anterpolate-Union{Tuple{FT}, Tuple{IT}, Tuple{MoM_Kernels.LagrangeInterpInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.anterpolate","text":"拉格朗日分步反插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZfarI!-Union{Tuple{MT}, Tuple{T}, Tuple{ZT}, Tuple{MLMFAIterator{ZT, MT}, AbstractArray{T}}} where {ZT, T<:Number, MT<:(Vector)}","page":"API","title":"MoM_Kernels.calZfarI!","text":"计算远区矩阵向量乘积\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSC!-Union{Tuple{VSCellT}, Tuple{BFT}, Tuple{Any, AbstractVector{VSCellT}, Any}, Tuple{Any, AbstractVector{VSCellT}, Any, Type{BFT}}} where {BFT<:BasisFunctionType, VSCellT<:SurfaceCellType}","page":"API","title":"MoM_Kernels.calZnearCSC!","text":"根据积分方程类型选择相应\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSC-Tuple{Any, Vector, Vector}","page":"API","title":"MoM_Kernels.calZnearCSC","text":"给出参数计算矩阵近场元并保存在CSC矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCCFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:RWG}","page":"API","title":"MoM_Kernels.calZnearCSCCFIE!","text":"采用 RWG 基函数计算 CFIE 面积分（SIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}, Tuple{Any, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}, Any}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:ConstBasisFunction}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 PWC 基函数计算六面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:LinearBasisFunction}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 RBF 基函数计算六面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}, Tuple{Any, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}, Any}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:ConstBasisFunction}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 PWC 基函数计算四面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:LinearBasisFunction}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 SWG 基函数计算网格元 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:RBF}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 RWG + RBF 基函数计算六面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:SWG}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 RWG + SWG 基函数计算 三角形 + 四面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:LinearBasisFunction}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 RWG 基函数计算 EFIE 面积分（SIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{VT2}, Tuple{VT1}, Tuple{CT}, Tuple{FT}, Tuple{Any, AbstractVector{VT1}, AbstractVector{VT2}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}, Tuple{Any, AbstractVector{VT1}, AbstractVector{VT2}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}, Any}} where {FT<:Real, CT<:Complex{FT}, VT1<:TetrahedraInfo, VT2<:HexahedraInfo, BFT<:PWC}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 PWC + PWC 基函数计算 四面体 + 六面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIE!-Union{Tuple{BFT}, Tuple{VT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, AbstractVector{VT}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, AbstractVector{VT}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}, Any}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, VT<:VolumeCellType, BFT<:PWC}","page":"API","title":"MoM_Kernels.calZnearCSCEFIE!","text":"采用 RWG + PWC 基函数计算 三角形 + 四面体/六面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCEFIEnew!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:LinearBasisFunction}","page":"API","title":"MoM_Kernels.calZnearCSCEFIEnew!","text":"采用 RBF 基函数计算六面体 EFIE 的体积分（VIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calZnearCSCMFIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Array{TriangleInfo{IT, FT}, 1}, Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:RWG}","page":"API","title":"MoM_Kernels.calZnearCSCMFIE!","text":"采用 RWG 基函数计算 MFIE 面积分（SIE）阻抗矩阵近场元并将结果放在ZnearCSC稀疏矩阵中\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.caladjZfarI!-Union{Tuple{MT}, Tuple{T}, Tuple{ZT}, Tuple{LinearAlgebra.Adjoint{ZT, MLMFAIterator{ZT, MT}}, AbstractArray{T}}} where {ZT, T<:Number, MT<:(Vector)}","page":"API","title":"MoM_Kernels.caladjZfarI!","text":"计算远区矩阵的伴随矩阵向量乘积\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.calαTransOnLevel!-NTuple{4, Any}","page":"API","title":"MoM_Kernels.calαTransOnLevel!","text":"计算 level 层的转移因子， 转移因子只存在于远亲组，每层远亲组最多有 7^3 - 3^3 = 316种结果\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.coeffgreen-Tuple{Integer}","page":"API","title":"MoM_Kernels.coeffgreen","text":"coeffgreen(n::Integer)\n\n归一化格林函数 (不包括frac14π项) 的展开系数函数，从 0 阶 到 n 阶：\n\nbeginaligned\ng(R)    = frace^-jkRR = sum_n=0^SglrOrdercoeffgreen(n)R^n-1\ncoeffgreen(n)  =   frac-jk^nn\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.convergencePlot-Union{Tuple{Vector{FT}}, Tuple{FT}} where FT<:Real","page":"API","title":"MoM_Kernels.convergencePlot","text":"计算完成后绘制收敛曲线\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.cooraInCoorb-Union{Tuple{T}, Tuple{Vector{T}, Vector{T}}} where T<:Number","page":"API","title":"MoM_Kernels.cooraInCoorb","text":"计算一维坐标coora在坐标corrb中的位置\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.disagg2KidLevel!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.disagg2KidLevel!","text":"向低层解聚 tLevel :: 本层 kLevel :: 子层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.disagg2KidLevel!-Union{Tuple{IPT}, Tuple{FT}, Tuple{IT}, Tuple{Any, MoM_Kernels.LevelInfo{IT, FT, IPT}}} where {IT, FT, IPT<:MoM_Kernels.LagrangeInterpInfo}","page":"API","title":"MoM_Kernels.disagg2KidLevel!","text":"向低层解聚 tLevel :: 本层 kLevel :: 子层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.disagg2LeafLevel!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.disagg2LeafLevel!","text":"解聚到叶层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.disaggOnBF!-Tuple{Any, Any, Any}","page":"API","title":"MoM_Kernels.disaggOnBF!","text":"在叶层往测试基函数解聚\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.electricJCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{StaticArraysCore.StaticArray{Tuple{3}, FT, 1}, StaticArraysCore.StaticArray{Tuple{3}, CT, 1}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.electricJCal","text":"计算给定三角形面片位置 r 处的电流 电流基函数公式为：Jₙ = Iₙfₙ 同一个三角形面片上存在三个基函数，因此 Jₜ = ∑ₜₙ₌₁³ Iₜₙfₜₙ 输入： r               ::Vec3D{FT} ICoeff          ::Vec3D{CT}  三角形上的三个基函数的计算得到的电流系数 triangleInfo    ::TriangleInfo{IT, FT}，三角形信息 输出值: Jtrir           ::Complex{FT}, 三角形上加权后的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.electricJCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Vector{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.electricJCal","text":"计算所有三角形上的高斯求积点电流权重乘积 JₙᵢWᵢ 电流基函数公式为：Jₙ = Iₙfₙ 同一个三角形面片上存在三个基函数，因此 JₙᵢWᵢ = ∑ₜₙ₌₁³ Iₜₙlₜₙ/2Sₜₙ 输入： ICoeff          ::Vector{Complex{FT}}  计算得到的电流系数 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，三角形信息 输出值: Jtri         ::Marrix{Complex{FT}}, 三角形上加权后的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorCFIE!-Union{Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{Array{Complex{FT}, 1}, ST, Array{TriangleInfo{IT, FT}, 1}}, Tuple{Array{Complex{FT}, 1}, ST, Array{TriangleInfo{IT, FT}, 1}, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.excitationVectorCFIE!","text":"计算平面波在 RWG 基函数上的激励向量 输入： source          ::ST, 波源 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，保存三角形信息的向量 nbf             ::Integer，基函数数目\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorCFIE-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, TriangleInfo{IT, FT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, BFT<:RWG}","page":"API","title":"MoM_Kernels.excitationVectorCFIE","text":"计算平面波在给定三角形的三个 半RWG 基函数上的激励向量 输入： source  ::ST, 波源 tri     ::TriangleInfo{IT, FT}，三角形信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorCFIE-Union{Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, Array{TriangleInfo{IT, FT}, 1}, Integer}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.excitationVectorCFIE","text":"计算平面波在 RWG 基函数上的激励向量 输入： source          ::ST, 波源 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，保存三角形信息的向量 nbf             ::Integer，基函数数目\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{Array{Complex{FT}, 1}, ST, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}}, Tuple{Array{Complex{FT}, 1}, ST, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.excitationVectorEFIE!","text":"计算平面波在 基函数 上的激励向量 输入： source          ::ST, 平面波源 tetrasInfo      ::Vector{TetrahedraInfo{IT, FT, CT}}，保存四面体信息的向量 nbf             ::Integer，基函数数量  \n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{Vector{CT}, ST, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}}, Tuple{Vector{CT}, ST, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.excitationVectorEFIE!","text":"计算平面波在 基函数 上的激励向量 输入： source          ::ST, 平面波源 hexasInfo       ::Vector{HexahedraInfo{IT, FT, CT}}，保存六面体信息的向量 nbf             ::Integer，基函数数量  \n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE!-Union{Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{Array{Complex{FT}, 1}, ST, Array{TriangleInfo{IT, FT}, 1}}, Tuple{Array{Complex{FT}, 1}, ST, Array{TriangleInfo{IT, FT}, 1}, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.excitationVectorEFIE!","text":"计算平面波在 RWG 基函数上的激励向量 输入： source          ::ST, 波源 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，保存三角形信息的向量 nbf             ::Integer，基函数数目\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE!-Union{Tuple{VT}, Tuple{ST}, Tuple{AbstractVector, ST, Vector{VT}}} where {ST<:ExcitingSources, VT<:(AbstractVector)}","page":"API","title":"MoM_Kernels.excitationVectorEFIE!","text":"计算平面波在 基函数 上的激励向量 输入： source          ::ST, 平面波源 tetrasInfo      ::Vector{TetrahedraInfo{IT, FT, CT}}，保存六面体信息的向量 nbf             ::Integer，基函数数量  \n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, HexahedraInfo{IT, FT, CT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:ConstBasisFunction}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在给定四面体的三个 PWC 基函数上的激励向量 输入： source      ::ST, 波源 hexa        ::HexahedraInfo{IT, FT, CT}，六面体信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, HexahedraInfo{IT, FT, CT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:LinearBasisFunction}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在给定六面体的六个 半SWG 基函数上的激励向量 输入： source      ::ST, 波源 hexa        ::HexahedraInfo{IT, FT, CT}，六面体信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, TetrahedraInfo{IT, FT, CT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:ConstBasisFunction}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在给定四面体的三个 PWC 基函数上的激励向量 输入： source      ::ST, 波源 tetra       ::TetrahedraInfo{IT, FT, CT}，四面体信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, TetrahedraInfo{IT, FT, CT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:LinearBasisFunction}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在给定四面体的四个 半SWG 基函数上的激励向量 输入： source      ::ST, 波源 tetra       ::TetrahedraInfo{IT, FT, CT}，四面体信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, TriangleInfo{IT, FT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, BFT<:RWG}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在给定三角形的三个 半RWG 基函数上的激励向量 输入： source  ::ST, 波源 tri     ::TriangleInfo{IT, FT}，三角形信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Integer}, Tuple{ST, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Integer, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在 基函数 上的激励向量 输入： source          ::ST, 平面波源 hexasInfo      ::Vector{HexahedraInfo{IT, FT, CT}}，保存六面体信息的向量 nbf             ::Integer，基函数数量  \n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Integer}, Tuple{ST, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Integer, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在 基函数 上的激励向量 输入： source          ::ST, 平面波源 tetrasInfo      ::Vector{TetrahedraInfo{IT, FT, CT}}，保存四面体信息的向量 nbf             ::Integer，基函数数量  \n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, Array{TriangleInfo{IT, FT}, 1}, Integer}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在 RWG 基函数上的激励向量 输入： source          ::ST, 波源 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，保存三角形信息的向量 nbf             ::Integer，基函数数目\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorEFIE-Union{Tuple{VT}, Tuple{ST}, Tuple{ST, Vector{VT}, Integer}} where {ST<:ExcitingSources, VT<:(AbstractVector)}","page":"API","title":"MoM_Kernels.excitationVectorEFIE","text":"计算平面波在 基函数 上的激励向量 输入： source          ::ST, 平面波源 tetrasInfo      ::Vector{TetrahedraInfo{IT, FT, CT}}，保存六面体信息的向量 nbf             ::Integer，基函数数量  \n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorMFIE!-Union{Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{Array{Complex{FT}, 1}, ST, Array{TriangleInfo{IT, FT}, 1}}, Tuple{Array{Complex{FT}, 1}, ST, Array{TriangleInfo{IT, FT}, 1}, Any}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.excitationVectorMFIE!","text":"计算平面波在 RWG 基函数上的激励向量 输入： source          ::ST, 波源 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，保存三角形信息的向量 nbf             ::Integer，基函数数目\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorMFIE-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, TriangleInfo{IT, FT}, Type{BFT}}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real, BFT<:RWG}","page":"API","title":"MoM_Kernels.excitationVectorMFIE","text":"计算平面波在给定三角形的三个 半RWG 基函数上的激励向量 输入： source  ::ST, 波源 tri     ::TriangleInfo{IT, FT}，三角形信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.excitationVectorMFIE-Union{Tuple{FT}, Tuple{IT}, Tuple{ST}, Tuple{ST, Array{TriangleInfo{IT, FT}, 1}, Integer}} where {ST<:ExcitingSources, IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.excitationVectorMFIE","text":"计算平面波在 RWG 基函数上的激励向量 输入： source          ::ST, 波源 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，保存三角形信息的向量 nbf             ::Integer，基函数数目\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.faceSingularityIg-Union{Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, TriangleInfo{IT, FT}, FT, AbstractVector{FT}}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.faceSingularityIg","text":"faceSingularityIg(rgt::AbstractVector{FT}, tris::TriangleInfo{IT, FT}, area::FT, facen̂::AbstractVector{FT}) where {IT<:Integer, FT<:Real}\n\n计算场点rgt在源三角形tris上的奇异性，tris的面积为area，外法向量为facen̂。 计算结果为：\n\nbeginaligned\nI_gS  = intg(R)dS\n        = sum_n=0^SglrOrdercoeffgreen(n)I^n-1_RS\nI^n_RS  = intR^ndS\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.faceSingularityIg-Union{Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, Tris4Tetra{IT, FT}, FT, AbstractVector{FT}}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.faceSingularityIg","text":"faceSingularityIg(rgt::AbstractVector{FT}, tris::Tris4Tetra{IT, FT}, area::FT, facen̂::AbstractVector{FT}) where {IT<:Integer, FT<:Real}\n\n计算场点rgt在源三角形tris（该三角形为组成四面体的某一面）上的奇异性，tris的面积为area，外法向量为facen̂。 计算结果为：\n\nbeginaligned\nI_gS  = intg(R)dS\n        = sum_n=0^SglrOrdercoeffgreen(n)I^n-1_RS\nI^n_RS  = intR^ndS\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.faceSingularityIg-Union{Tuple{ST}, Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, ST, FT, AbstractVector{FT}}} where {IT<:Integer, FT<:Real, ST<:SurfaceCellType{IT, FT}}","page":"API","title":"MoM_Kernels.faceSingularityIg","text":"faceSingularityIg(rgt::AbstractVector{FT}, polys::ST, area::FT, \nfacen̂::AbstractVector{FT}) where {IT<:Integer, FT<:Real, ST<:SurfaceCellType{IT, FT}}\n\n计算场点rgt在多边形polys上的奇异性，polys的面积为area，外法向量为facen̂。 计算结果为：\n\nbeginaligned\nI_gS  = intg(R)dS\n        = sum_n=0^SglrOrdercoeffgreen(n)I^n-1_RS\nI^n_RS  = intR^ndS\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.faceSingularityIgIvecg-Union{Tuple{ST}, Tuple{FT}, Tuple{AbstractVector{FT}, ST, Any, AbstractVector}} where {FT<:Real, ST<:SurfaceCellType}","page":"API","title":"MoM_Kernels.faceSingularityIgIvecg","text":"faceSingularityIgIvecg(rgt::AbstractVector{FT}, polys::ST, area, \n    facen̂::AbstractVector) where {FT<:Real, ST<:SurfaceCellType{IT, FT}}\n\n计算场点rgt在多边形polys上的奇异性，polys的面积为area，外法向量为facen̂。 计算结果为：\n\nbeginaligned\nI_gS  = intg(R)dS\n        = sum_n=0^SglrOrdercoeffgreen(n)I^n-1_RS\nboldsymbolI_gS  = intboldsymbolRg(R)dS\n        = sum_l_jhatbmu_j sum_n=0^SglrOrderfraccoeffgreen(n)n+1I^n-1_lr + dbmnI^n-1_gS\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.faceSingularityIgIvecgI∇gS-Union{Tuple{ST}, Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, ST, FT, AbstractVector{FT}}} where {IT<:Integer, FT<:Real, ST<:SurfaceCellType{IT, FT}}","page":"API","title":"MoM_Kernels.faceSingularityIgIvecgI∇gS","text":"面上的近奇异性 rgt, 为场三角形的求积点 tris::TriangleInfo{IT, FT}， 源三角形信息 计算得到结果:: IgS     =   ∫ g(R) dS'      =   ∑ₙ₌₀(coeffgreen(n)IR[n-1]) IvecgS  =   ∫ Rvec g(R) dS' =   ∑ₗⱼ ûⱼ ∑ₙ₌₀(coeffgreen(n)/(n+1)Ilᵣ[n-1]) + dn̂IgS I∇gS    =   ∫ ∇g(R) dS'     =   ∑ₙ₌₀VSC₃ⁿ*(-1/(n+2)∑ₗⱼûⱼIlᵣ[n+2] + dn̂IgS )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.faceSingularityIᵣIᵨ-Union{Tuple{FT}, Tuple{IT}, Tuple{StaticArraysCore.MMatrix{3, 7, FT, 21}, TriangleInfo{IT, FT}}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.faceSingularityIᵣIᵨ","text":"面上的近奇异性 rgts::MMatrix{GQPNTriSglr, 3, Complex{FT}}, 为场三角形的所有高斯求积点 tris::TriangleInfo{IT, FT}， 源三角形信息 计算得到结果:: r0tProj2s::MMatrix{3, GQPNTriSglr, Complex{FT}, 3GQPNTriSglr}, 积分点在源三角形上的投影点 Iᵣ  =   ∫ 1/R dS'   =   ∑₁³(p02ilfᵢ - dtsAbsβᵢ) Iᵨ  =   ∫ ρ/R dS'   =   0.5∑₁³{ûᵢ[(R0^2fᵢ + li⁺R⁺ - li⁻*R⁻)]}\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.farEPlot-Union{Tuple{FT}, Tuple{Any, Any, Matrix{FT}, Matrix{FT}}} where FT<:Real","page":"API","title":"MoM_Kernels.farEPlot","text":"farE 绘图\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.farField-Tuple{Any, Any, Any}","page":"API","title":"MoM_Kernels.farField","text":"在球坐标为r̂θϕ处计算辐射积分，采用RWG基函数时，三角形上没有统一的电流值，每一点上都是三边电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙlₙρₙ/(2Sₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙlₙρₙ/2)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.farField-Union{Tuple{BFT}, Tuple{CT}, Tuple{VT}, Tuple{Any, Any, Vector{CT}, Vector{VT}, Any}, Tuple{Any, Any, Vector{CT}, Vector{VT}, Any, Type{BFT}}} where {VT<:VolumeCellType, CT<:Complex, BFT<:BasisFunctionType}","page":"API","title":"MoM_Kernels.farField","text":"在球坐标为r̂θϕ处计算辐射积分，采用SWG基函数时，四面体上没有统一的电流值，每一点上都是四个SWG基函数电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙsₙρₙ/(3Vₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙsₙρₙ/3)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.farField-Union{Tuple{BFT}, Tuple{ST}, Tuple{CT}, Tuple{Any, Any, Vector{CT}, Vector{ST}, Any}, Tuple{Any, Any, Vector{CT}, Vector{ST}, Any, Type{BFT}}} where {CT<:Complex, ST<:TriangleInfo, BFT<:RWG}","page":"API","title":"MoM_Kernels.farField","text":"在球坐标为r̂θϕ处计算辐射积分，采用RWG基函数时，三角形上没有统一的电流值，每一点上都是三边电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙlₙρₙ/(2Sₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙlₙρₙ/2)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.farField-Union{Tuple{VT}, Tuple{CT}, Tuple{Any, Any, Vector{CT}, Vector{VT}, Any}} where {CT<:Complex, VT<:(AbstractVector)}","page":"API","title":"MoM_Kernels.farField","text":"在球坐标为r̂θϕ处计算辐射积分，采用SWG基函数时，四面体上没有统一的电流值，每一点上都是四个SWG基函数电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙsₙρₙ/(3Vₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙsₙρₙ/3)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.func4Cube1stkInterval-Tuple{MoM_Kernels.CubeInfo}","page":"API","title":"MoM_Kernels.func4Cube1stkInterval","text":"这六个函数用于寻找盒子的子盒子区间内的比较函数，多重分派以实现\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.geoElectricJCal-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Vector{CT}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:PWC}","page":"API","title":"MoM_Kernels.geoElectricJCal","text":"计算六面体上的电流。 分片常数基 PWC 基函数 电流基函数公式为：Jₙ = κₙIₙfₙ 同一个六面体面片上存在 x̂, ŷ, ẑ 方向的三个基函数，因此 Jₜ = κₜ ∑ₜₙ₌₁³Iₜₙfₜₙ 输入： ICoeff          ::Vector{Complex{FT}}  计算得到的电流系数 hexasInfo      ::Vector{HexahedraInfo{IT, FT, CT}},  输出值: Jhexa          ::Marrix{Complex{FT}}, 六面体上的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.geoElectricJCal-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Vector{CT}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:RBF}","page":"API","title":"MoM_Kernels.geoElectricJCal","text":"计算六面体上的电流。 分片常数基 RBF 基函数 电流基函数公式为：Jₙ = κₙIₙfₙ 同一个六面体面片上存在 6 或 3 个基函数，因此 Jₜ = ∑ₜₙ₌₁ Iₜₙfₜₙ 输入： ICoeff          ::Vector{Complex{FT}}  计算得到的电流系数 hexasInfo       ::Vector{HexahedraInfo{IT, FT, CT}},  输出值: Jhexa          ::Marrix{Complex{FT}}, 六面体上加权后的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.geoElectricJCal-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Vector{CT}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:PWC}","page":"API","title":"MoM_Kernels.geoElectricJCal","text":"计算四面体上的电流。 分片常数基 PWC 基函数 电流基函数公式为：Jₙ = κₙIₙfₙ 同一个四面体面片上存在 x̂, ŷ, ẑ 方向的三个基函数，因此 Jₜ = κₜ ∑ₜₙ₌₁³Iₜₙfₜₙ 输入： ICoeff          ::Vector{Complex{FT}}  计算得到的电流系数 tetrasInfo      ::Vector{TetrahedraInfo{IT, FT, CT}},  输出值: Jtetra          ::Marrix{Complex{FT}}, 四面体上的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.geoElectricJCal-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Vector{CT}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:SWG}","page":"API","title":"MoM_Kernels.geoElectricJCal","text":"计算四面体上的电流。 分片常数基 SWG 基函数 电流基函数公式为：Jₙ = κₙIₙfₙ 同一个四面体面片上存在四个基函数，因此 Jₜ = ∑ₜₙ₌₁⁴ Iₜₙfₜₙ 输入： ICoeff          ::Vector{Complex{FT}}  计算得到的电流系数 tetrasInfo      ::Vector{TetrahedraInfo{IT, FT, CT}},  输出值: Jtetra          ::Marrix{Complex{FT}}, 四面体上加权后的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.geoElectricJCal-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Vector{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}}, Tuple{Vector{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, Type{BFT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}, BFT<:RWG}","page":"API","title":"MoM_Kernels.geoElectricJCal","text":"计算三角形面片上的加权电流。 电流基函数公式为：Jₙ = Iₙfₙ 同一个三角形面片上存在三个基函数，因此 Jₜ = ∑ₜₙ₌₁³ Iₜₙfₜₙ 输入： ICoeff          ::Vector{Complex{FT}}  计算得到的电流系数 trianglesInfo   ::Vector{TriangleInfo{IT, FT}}，三角形信息 输出值: Jtri         ::Marrix{Complex{FT}}, 三角形上加权后的电流\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getAggSBFOnLevel-Union{Tuple{BFT}, Tuple{ST}, Tuple{Any, Vector{ST}, Vector{BFT}}} where {ST<:SurfaceCellType, BFT<:BasisFunctionType}","page":"API","title":"MoM_Kernels.getAggSBFOnLevel","text":"根据积分方程类型计算基层聚合项\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getAggSBFOnLevel-Union{Tuple{BFT}, Tuple{VT}, Tuple{Any, Vector{VT}, Vector{BFT}}} where {VT<:VolumeCellType, BFT<:BasisFunctionType}","page":"API","title":"MoM_Kernels.getAggSBFOnLevel","text":"根据积分方程类型计算基层聚合项\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getAggSBFOnLevel-Union{Tuple{VT2}, Tuple{VT1}, Tuple{Any, Vector{VT1}, Vector{VT2}}} where {VT1<:(AbstractVector), VT2<:(AbstractVector)}","page":"API","title":"MoM_Kernels.getAggSBFOnLevel","text":"根据积分方程类型计算基层聚合项\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getBfsCenter-Union{Tuple{Vector{BFT}}, Tuple{BFT}} where BFT<:BasisFunctionType","page":"API","title":"MoM_Kernels.getBfsCenter","text":"计算基函数中心的数组，用于方便混合基函数使用时的情况\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getBfsCenter-Union{Tuple{Vector{VT}}, Tuple{VT}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.getBfsCenter","text":"计算基函数中心的数组，用于方便混合基函数使用时的情况\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getCubeIDsWithGeos-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.getCubeIDsWithGeos","text":"找到 geosInfo 所在的所有 cude id\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getExcitationVector-Union{Tuple{VST}, Tuple{Vector{VST}, Any, Any}} where VST<:SurfaceCellType","page":"API","title":"MoM_Kernels.getExcitationVector","text":"根据几何信息与基函数数量，计算激励向量 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 source::    激励源 返回： V::         激励向量\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getExcitationVector-Union{Tuple{VST}, Tuple{Vector{VST}, Any, Any}} where VST<:VolumeCellType","page":"API","title":"MoM_Kernels.getExcitationVector","text":"根据几何信息与基函数数量，计算激励向量 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 source::    激励源 返回： V::         激励向量\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getExcitationVector-Union{Tuple{VT}, Tuple{Vector{VT}, Any, Any}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.getExcitationVector","text":"根据几何信息与基函数数量，计算激励向量 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 source::    激励源 返回： V::         激励向量\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getGeoIDsInCubeChunk-Tuple{Any, Tuple}","page":"API","title":"MoM_Kernels.getGeoIDsInCubeChunk","text":"getGeoIDsInCubeChunk(cubes, ckunkIndice)\n\n获取 ckunkIndice 内的所有 cube 的 geo ID ， 返回为 Tuple 形式以适应数组索引相关API\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getGeoIDsInCubeChunk-Tuple{Any, UnitRange}","page":"API","title":"MoM_Kernels.getGeoIDsInCubeChunk","text":"getGeoIDsInCubeChunk(cubes, ckunkIndice)\n\n获取 ckunkIndice 内的所有 cube 的 geo ID ， 返回为 Tuple 形式以适应数组索引相关API\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getGeosInterval-Tuple{T} where T<:(AbstractVector)","page":"API","title":"MoM_Kernels.getGeosInterval","text":"获取几何信息数组的区间，针对普通 Vector 和 OffsetVector 分别派发\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getGeosInterval-Tuple{T} where T<:(OffsetArrays.OffsetVector{T} where T)","page":"API","title":"MoM_Kernels.getGeosInterval","text":"获取几何信息数组的区间，针对普通 Vector 和 OffsetVector 分别派发\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getImpedanceMatAndExciteV-Tuple{Any, Integer, Any}","page":"API","title":"MoM_Kernels.getImpedanceMatAndExciteV","text":"根据几何信息与基函数数量，计算阻抗矩阵和激励向量 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 source::    激励源 返回： Zmat::      阻抗矩阵 V::         激励向量\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getImpedanceMatAndExciteV-Tuple{Any, Vector, Any}","page":"API","title":"MoM_Kernels.getImpedanceMatAndExciteV","text":"根据几何信息与基函数数量，计算阻抗矩阵和激励向量 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 bfsInfo::   基函数信息 source::    激励源 返回： Zmat::      阻抗矩阵 V::         激励向量\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getImpedanceMatrix-Union{Tuple{ST}, Tuple{Vector{ST}, Integer}} where ST<:SurfaceCellType","page":"API","title":"MoM_Kernels.getImpedanceMatrix","text":"根据几何信息与基函数数量，计算阻抗矩阵 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 返回： Zmat\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getImpedanceOpt-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.getImpedanceOpt","text":"根据几何信息与基函数数量，计算阻抗矩阵算子 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 source::    激励源 返回： Zopt::      阻抗矩阵算子，由近场稀疏矩阵和远场八叉树聚合、转移、解聚组成 V::         激励向量 Octree::    八叉树 ZnearCSC::  阻抗矩阵近场元\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getImpedanceOptAndExciteVOctree-Tuple{Any, Any, Any}","page":"API","title":"MoM_Kernels.getImpedanceOptAndExciteVOctree","text":"根据几何信息与基函数数量，计算阻抗矩阵算子和激励向量 输入： geosInfo::  几何信息，三角形、四面体、六面体的向量 nbf::       基函数数量 source::    激励源 返回： Zopt::      阻抗矩阵算子，由近场稀疏矩阵和远场八叉树聚合、转移、解聚组成 V::         激励向量 Octree::    八叉树 ZnearCSC::  阻抗矩阵近场元\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getLeafCubeL-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:HexahedraInfo","page":"API","title":"MoM_Kernels.getLeafCubeL","text":"六面体从网格平均尺寸设置整体的叶层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getLeafCubeL-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:TetrahedraInfo","page":"API","title":"MoM_Kernels.getLeafCubeL","text":"四面体从网格平均尺寸设置整体的叶层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getLeafCubeL-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:TriangleInfo","page":"API","title":"MoM_Kernels.getLeafCubeL","text":"三角形面网格直接设置为的叶层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getLeafCubeL-Union{Tuple{Vector{T}}, Tuple{T}} where T<:(AbstractVector)","page":"API","title":"MoM_Kernels.getLeafCubeL","text":"混合网格从第2类里的网格平均尺寸设置整体的叶层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getNeiFarNeighborCubeIDs-Tuple{Any, Tuple}","page":"API","title":"MoM_Kernels.getNeiFarNeighborCubeIDs","text":"getNeiFarNeighborCubeIDs(cubes, chunkIndice::Tuple)\n\n\ngetFarNeighborCubeIDs(cubes, chunkIndice)\n\n获取 ckunkIndice 内的所有 cube 的 远亲盒子ID， 返回为 Tuple 形式以适应数组索引相关API\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getNeighborCubeIDs-Tuple{Any, Tuple}","page":"API","title":"MoM_Kernels.getNeighborCubeIDs","text":"getNeighborCubeIDs(cubes, chunkIndice)\n\n获取 ckunkIndice 内的所有 cube 的 邻盒子ID， 返回为 Tuple 形式以适应数组索引相关API\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.getOctreeAndReOrderBFs!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.getOctreeAndReOrderBFs!","text":"根据基函数中心位置构建八叉树，并重排基函数信息、将新基函数 ID 赋值给几何元信息数组 返回值： nLevels::   层数 octree::    得到的八叉树 leafCubeEdgel:: 控制叶层盒子大小 isDistribute:: 控制是否为分布式计算\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.get_Interpolation_Method-Tuple{Symbol}","page":"API","title":"MoM_Kernels.get_Interpolation_Method","text":"获取插值算法\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.get_chunks_minmax_col-Tuple{Any}","page":"API","title":"MoM_Kernels.get_chunks_minmax_col","text":"get_chunks_minmax_col(matchunks)\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.get_leafCubeSize-Tuple{}","page":"API","title":"MoM_Kernels.get_leafCubeSize","text":"获取叶层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.get_partition-Tuple{Any, Any, Any}","page":"API","title":"MoM_Kernels.get_partition","text":"get_partition(nCubes, sizePoles, np)\n\n根据给定的盒子数、多极子数、进程数返回该层 pattern 的三个维度的划分数量。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.get_partition_map-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.get_partition_map","text":"根据 partition 计算在盒子方向本层所有 rank 到子层所有 rank 的 map。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.gq_xsws_on_sphere-Tuple{Any}","page":"API","title":"MoM_Kernels.gq_xsws_on_sphere","text":"gq_xsws_on_sphere(L)\n\n计算单位球面 2(L+1) 阶高斯求积的采样点坐标权重\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.greenfunc_star-Union{Tuple{T}, Tuple{StaticArraysCore.StaticArray{Tuple{3}, T, 1}, StaticArraysCore.StaticArray{Tuple{3}, T, 1}}} where T<:AbstractFloat","page":"API","title":"MoM_Kernels.greenfunc_star","text":"greenfunc_star(pa::Vec3D{T}, pb::Vec3D{T}[; k=Params.K_0, taylorOrder = SglrOrder]) where {T<:AbstractFloat}\n\n归一化格林函数 4πG(R) 泰勒展开后去奇异项：\n\ng^*(R)    = frace^-jkRR - frac1R\n            = sum_n=1^SglrOrderfrac-jk^nnR^n-1\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.iluPrecondition-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.iluPrecondition","text":"从 IncompleteLU.jl[https://github.com/haampie/IncompleteLU.jl.git]  包实现ilu, 再次封装是因为要加入一些判断\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4CFIE4PEC-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Array{TriangleInfo{IT, FT}, 1}, Integer, Type{BFT}}} where {IT, FT, BFT<:RWG}","page":"API","title":"MoM_Kernels.impedancemat4CFIE4PEC","text":"本函数用于计算PEC的CFIE阻抗矩阵。 输入信息： trianglesInfo:  为包含三角形信息实例的向量 nrwg        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对三角形循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4EFIE4PEC!-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Array{Complex{FT}, 2}, Array{TriangleInfo{IT, FT}, 1}, Type{BFT}}} where {IT, FT, BFT<:RWG}","page":"API","title":"MoM_Kernels.impedancemat4EFIE4PEC!","text":"本函数用于在有矩阵的情况下计算PEC的EFIE阻抗矩阵。 输入信息： Zmat trianglesInfo:  为包含三角形信息实例的向量 nrwg        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对三角形循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4EFIE4PEC-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Array{TriangleInfo{IT, FT}, 1}, Integer, Type{BFT}}} where {IT, FT, BFT<:RWG}","page":"API","title":"MoM_Kernels.impedancemat4EFIE4PEC","text":"本函数用于计算PEC的EFIE阻抗矩阵。 输入信息： trianglesInfo:  为包含三角形信息实例的向量 nrwg        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对三角形循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4MFIE4PEC-Union{Tuple{BFT}, Tuple{FT}, Tuple{IT}, Tuple{Array{TriangleInfo{IT, FT}, 1}, Integer, Type{BFT}}} where {IT, FT, BFT<:RWG}","page":"API","title":"MoM_Kernels.impedancemat4MFIE4PEC","text":"本函数用于计算PEC的MFIE阻抗矩阵。 输入信息： trianglesInfo:  为包含三角形信息实例的向量 nrwg        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对三角形循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4RWGPWC!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}}, Tuple{Matrix{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Any}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.impedancemat4RWGPWC!","text":"RWG + PWC 部分的阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4RWGPWC!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}}, Tuple{Matrix{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Any}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.impedancemat4RWGPWC!","text":"RWG + PWC 部分的阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4RWGRBF!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.impedancemat4RWGRBF!","text":"RWG + RBF 部分的阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4RWGSWG!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TriangleInfo{IT, FT}, 1}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.impedancemat4RWGSWG!","text":"RWG + SWG 部分的阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT, FT, CT, BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE!","text":"本函数用于计算介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： hexasInfo::AbstractVector{HexahedraInfo{IT, FT, CT}},  为包含六面体信息实例的向量 tetrasInfo::AbstractVector{TetrahedraInfo{IT, FT, CT}}, 为包含四面体信息实例的向量 nPWC        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT, FT, CT, BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE!","text":"本函数用于计算介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： hexasInfo  :  为包含六面体信息实例的向量 nrwg        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT, FT, CT, BFT<:RBF}","page":"API","title":"MoM_Kernels.impedancemat4VIE!","text":"本函数用于计算介质的EFIE阻抗矩阵。 输入信息： hexasInfo  :  为包含六面体信息实例的向量 nrbf        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对六面体循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT, FT, CT, BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE!","text":"本函数用于计算介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： hexasInfo::AbstractVector{HexahedraInfo{IT, FT, CT}},  为包含六面体信息实例的向量 tetrasInfo::AbstractVector{TetrahedraInfo{IT, FT, CT}}, 为包含四面体信息实例的向量 nPWC        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT, FT, CT, BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE!","text":"本函数用于计算介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： tetrasInfo  :  为包含四面体信息实例的向量 nrwg        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE!-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Matrix{CT}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Type{BFT}}} where {IT, FT, CT, BFT<:SWG}","page":"API","title":"MoM_Kernels.impedancemat4VIE!","text":"本函数用于计算介质的 EFIE 阻抗矩阵。 输入信息： Zmat       :   已初始化的阻抗矩阵 tetrasInfo  :  为包含四面体信息实例的向量 nswg        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对四面体循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Integer, Type{BFT}}} where {IT, FT, CT, BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE","text":"本函数用于计算介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： hexasInfo  :  为包含六面体信息实例的向量 nPWC        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Integer, Type{BFT}}} where {IT, FT, CT, BFT<:RBF}","page":"API","title":"MoM_Kernels.impedancemat4VIE","text":"本函数用于计算介质的EFIE阻抗矩阵。 输入信息： hexasInfo  :  为包含六面体信息实例的向量 nrbf        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对六面体循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Integer, Type{BFT}}} where {IT, FT, CT, BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE","text":"本函数用于计算介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： tetrasInfo  :  为包含四面体信息实例的向量 nrwg        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE-Union{Tuple{BFT}, Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Integer, Type{BFT}}} where {IT, FT, CT, BFT<:SWG}","page":"API","title":"MoM_Kernels.impedancemat4VIE","text":"本函数用于计算介质的EFIE阻抗矩阵。 输入信息： tetrasInfo  :  为包含四面体信息实例的向量 nswg        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对四面体循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VIE-Union{Tuple{BFT}, Tuple{VT}, Tuple{AbstractVector{VT}, Integer, Type{BFT}}} where {VT<:(AbstractVector), BFT<:PWC}","page":"API","title":"MoM_Kernels.impedancemat4VIE","text":"本函数用于计算混合网格（四面体+六面体）下介质体的 PWC 基函数下的 EFIE 阻抗矩阵。 输入信息： geosInfo    :  为包含四面体信息实例的向量 nPWC        :  基函数数目 返回值 Zmat        :  阻抗矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VSIE-Union{Tuple{VT}, Tuple{Vector{VT}, Integer}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.impedancemat4VSIE","text":"计算VSIE的矩阵\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VSIERWGPWC-Union{Tuple{VT}, Tuple{Vector{VT}, Integer}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.impedancemat4VSIERWGPWC","text":"本函数用于计算金属介质混合体的EFIE阻抗矩阵。 输入信息： geosInfo    :  为包含几何体信息实例的向量 nbf        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对网格元（几何体）循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VSIERWGRBF-Union{Tuple{VT}, Tuple{Vector{VT}, Integer}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.impedancemat4VSIERWGRBF","text":"本函数用于计算金属介质混合体的EFIE阻抗矩阵。 输入信息： geosInfo    :  为包含几何体信息实例的向量 nbf        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对网格元（几何体）循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.impedancemat4VSIERWGSWG-Union{Tuple{VT}, Tuple{Vector{VT}, Integer}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.impedancemat4VSIERWGSWG","text":"本函数用于计算金属介质混合体的EFIE阻抗矩阵。 输入信息： geosInfo    :  为包含几何体信息实例的向量 nbf        :  基函数数目 返回值 Zmat         :  阻抗矩阵\n\n注意，此程序由于采用的对网格元（几何体）循环计算，因此在并行化时，会出现不同线程计算出同一个矩阵元，导致写入冲突，因此要加线程锁保证结果写入正确\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialVMulZchunks!-Tuple{T} where T<:MoM_Kernels.ZnearChunksStruct","page":"API","title":"MoM_Kernels.initialVMulZchunks!","text":"初始化 阻抗矩阵 右乘 向量 乘积的 分布式数组\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialZchunksMulV!-Tuple{T} where T<:MoM_Kernels.ZnearChunksStruct","page":"API","title":"MoM_Kernels.initialZchunksMulV!","text":"初始化 阻抗矩阵 左乘 向量 乘积的 分布式数组\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialZnearCSC-Tuple{Any, Int64}","page":"API","title":"MoM_Kernels.initialZnearCSC","text":"根据八叉树层信息初始化近场矩阵元\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialZnearCSR-Tuple{Any, Int64}","page":"API","title":"MoM_Kernels.initialZnearCSR","text":"根据八叉树层信息初始化 CSR 压缩稀疏行 (用 transpose 实现) 近场矩阵元\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialZnearChunks-Tuple{Any, AbstractVector}","page":"API","title":"MoM_Kernels.initialZnearChunks","text":"根据八叉树盒子信息初始化 cube 对应的近场矩阵元块儿\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialmmulvStruct-Tuple{Any}","page":"API","title":"MoM_Kernels.initialmmulvStruct","text":"根据八叉树盒子信息初始化 cube 对应的近场矩阵元块儿\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.initialvmulmStruct-Tuple{Any}","page":"API","title":"MoM_Kernels.initialvmulmStruct","text":"根据八叉树盒子信息初始化 cube 对应的近场矩阵元块儿\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.inputParameters-Tuple{}","page":"API","title":"MoM_Kernels.inputParameters","text":"inputParameters(;args...)\n\n用于输入仿真参数，并修改奇异性处理中频率相关常量。 详见 inputBasicParameters 和 modiSingularityRelatedConsts!。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.integral1DXW-Union{Tuple{FT}, Tuple{IT}, Tuple{FT, FT, IT, Symbol}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.integral1DXW","text":"计算分别采用高斯求积、中点求积计算 θ,ϕ 方向的采样点的坐标、权重 lb::FT，  积分区域下界 hb::FT,   积分区域上界 Nsample::IT, 采样点数 mod::Symbol， 模式，接受 :uni, 均值积分 :glq, 高斯-勒让德积分 两种模式\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.interpolate!-Union{Tuple{FT}, Tuple{IT}, Tuple{AbstractArray, MoM_Kernels.LagrangeInterp1StepInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.interpolate!","text":"拉格朗日单步插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.interpolate!-Union{Tuple{FT}, Tuple{IT}, Tuple{AbstractArray, MoM_Kernels.LagrangeInterpInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.interpolate!","text":"拉格朗日分步插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.interpolate-Union{Tuple{FT}, Tuple{IT}, Tuple{MoM_Kernels.LagrangeInterp1StepInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.interpolate","text":"拉格朗日单步插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.interpolate-Union{Tuple{FT}, Tuple{IT}, Tuple{MoM_Kernels.LagrangeInterpInfo{IT, FT}, AbstractArray}} where {IT, FT}","page":"API","title":"MoM_Kernels.interpolate","text":"拉格朗日分步插值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.interpolationCSCMatCal-Union{Tuple{FT}, Tuple{IT}, Tuple{MoM_Kernels.GLPolesInfo{FT}, MoM_Kernels.GLPolesInfo{FT}, IT}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.interpolationCSCMatCal","text":"采用局部插值、两步插值法，计算局部坐标到全局坐标的稀疏插值矩阵，Julia数据存储为列主的，因此使用 压缩稀疏列(Compressed Sparse Column, CSC) pLevelPoles::GLPolesInfo{FT}， 父层多极子信息 tLevelPoles::GLPolesInfo{FT}， 本层多极子信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.iterSolverSet-Tuple{Symbol}","page":"API","title":"MoM_Kernels.iterSolverSet","text":"迭代求解器选择\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.levelIntegralInfoCal-Union{Tuple{FT}, Tuple{FT, Union{Val{:Lagrange2Step}, Val{:Lagrange1Step}}}} where FT<:Real","page":"API","title":"MoM_Kernels.levelIntegralInfoCal","text":"计算八叉树的积分相关信息，包括截断项、各层积分点和求积权重数据 输入: levelCubeEdgel::FT,  层盒子边长, 一般叶层为0.25λ，其中 λ 为区域局部波长。 返回值 L           ::IT， 层 截断项 levelsPoles ::Vector{GLPolesInfo{FT}}，从叶层到第 “2” 层的角谱空间采样信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.loadCurrent-Tuple{Any}","page":"API","title":"MoM_Kernels.loadCurrent","text":"读取电流系数\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.memoryAllocationOnLevels!-Union{Tuple{LV}, Tuple{IT}, Tuple{Integer, Dict{IT, LV}}} where {IT<:Integer, LV<:MoM_Kernels.LevelInfo}","page":"API","title":"MoM_Kernels.memoryAllocationOnLevels!","text":"预分配各层上的聚合项、解聚项\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.modiSingularityRelatedConsts!-Tuple{}","page":"API","title":"MoM_Kernels.modiSingularityRelatedConsts!","text":"用于输入参数（特指频率）改变时的更改相关常数项\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.octreeXWNCal-Union{Tuple{FT}, Tuple{IT}, Tuple{FT, FT, IT, Symbol}} where {IT<:Integer, FT<:Real}","page":"API","title":"MoM_Kernels.octreeXWNCal","text":"计算各层八叉树求积坐标、求积权重 lb::FT，  积分区域下界 hb::FT,   积分区域上界 nlevels::IT, 八叉树叶层ID mod::Symbol， 模式，接受 :uni, 均值积分(ϕ方向) :glq, 高斯-勒让德积分(θ方向) 两种模式\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.pickCycleVec-Union{Tuple{T}, Tuple{Integer, Vector{T}}} where T<:Real","page":"API","title":"MoM_Kernels.pickCycleVec","text":"根据循环向量 cycleVec 的周期性索引超出上下界的 index 对应的值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.pickθ-Union{Tuple{T}, Tuple{Integer, Vector{T}}} where T<:Real","page":"API","title":"MoM_Kernels.pickθ","text":"利用 θ 在极点附近的对称性计算索引超出上下界的 θ 值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.pickϕ-Union{Tuple{TT}, Tuple{Integer, Vector{TT}}} where TT<:Real","page":"API","title":"MoM_Kernels.pickϕ","text":"利用 ϕ 的周期性索引超出上下界的 ϕ 值\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.radarCrossSection-Union{Tuple{BFT}, Tuple{CT}, Tuple{VT}, Tuple{Any, Any, Vector{CT}, Vector{VT}}, Tuple{Any, Any, Vector{CT}, Vector{VT}, Type{BFT}}} where {VT<:VolumeCellType, CT<:Complex, BFT<:BasisFunctionType}","page":"API","title":"MoM_Kernels.radarCrossSection","text":"在球坐标为r̂θϕ处计算辐射积分，采用SWG基函数时，四面体上没有统一的电流值，每一点上都是四个SWG基函数电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙsₙρₙ/(3Vₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙsₙρₙ/3)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.radarCrossSection-Union{Tuple{BFT}, Tuple{ST}, Tuple{CT}, Tuple{Any, Any, Vector{CT}, Vector{ST}}, Tuple{Any, Any, Vector{CT}, Vector{ST}, Type{BFT}}} where {CT<:Complex, ST<:TriangleInfo, BFT<:RWG}","page":"API","title":"MoM_Kernels.radarCrossSection","text":"在球坐标为r̂θϕ处计算辐射积分，采用RWG基函数时，三角形上没有统一的电流值，每一点上都是三边电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙlₙρₙ/(2Sₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙlₙρₙ/2)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.radarCrossSection-Union{Tuple{VT}, Tuple{CT}, Tuple{Any, Any, Vector{CT}, Vector{VT}}} where {CT<:Complex, VT<:(AbstractVector)}","page":"API","title":"MoM_Kernels.radarCrossSection","text":"在球坐标为r̂θϕ处计算辐射积分，采用SWG基函数时，四面体上没有统一的电流值，每一点上都是四个SWG基函数电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙsₙρₙ/(3Vₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙsₙρₙ/3)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.raditionalIntegralNCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Any, Any, Array{TriangleInfo{IT, FT}, 1}, Array{CT}}} where {IT<:Integer, FT<:Real, CT<:Complex}","page":"API","title":"MoM_Kernels.raditionalIntegralNCal","text":"在设定好的观测角度上的球坐标处计算辐射积分，采用RWG基函数时，三角形上没有统一的电流值，每一点上都是三边电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙlₙρₙ/(2Sₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙlₙρₙ/2)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.raditionalIntegralNθϕCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{r̂θϕInfo{FT}, AbstractArray{HexahedraInfo{IT, FT, CT}, 1}, Matrix{CT}}} where {IT<:Integer, FT<:Real, CT<:Complex}","page":"API","title":"MoM_Kernels.raditionalIntegralNθϕCal","text":"在球坐标为r̂θϕ处计算辐射积分，采用 RBF 基函数时，六面体上没有统一的电流值 N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dV)\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.raditionalIntegralNθϕCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{r̂θϕInfo{FT}, AbstractArray{TetrahedraInfo{IT, FT, CT}, 1}, Matrix{CT}}} where {IT<:Integer, FT<:Real, CT<:Complex}","page":"API","title":"MoM_Kernels.raditionalIntegralNθϕCal","text":"在球坐标为r̂θϕ处计算辐射积分，采用 SWG 基函数时，四面体上没有统一的电流值，每一点上都是四面电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dV)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁⁴ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dV)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁⁴ IₙSₙρₙ/(3Vₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁⁴ IₙSₙρₙ/3)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.raditionalIntegralNθϕCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{r̂θϕInfo{FT}, Array{TriangleInfo{IT, FT}, 1}, Array{CT, 3}}} where {IT<:Integer, FT<:Real, CT<:Complex}","page":"API","title":"MoM_Kernels.raditionalIntegralNθϕCal","text":"在球坐标为r̂θϕ处计算辐射积分，采用RWG基函数时，三角形上没有统一的电流值，每一点上都是三边电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙlₙρₙ/(2Sₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙlₙρₙ/2)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.raditionalIntegralNθϕCal-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{r̂θϕInfo{FT}, Array{TriangleInfo{IT, FT}, 1}, Matrix{CT}}} where {IT<:Integer, FT<:Real, CT<:Complex}","page":"API","title":"MoM_Kernels.raditionalIntegralNθϕCal","text":"在球坐标为r̂θϕ处计算辐射积分，采用RWG基函数时，三角形上没有统一的电流值，每一点上都是三边电流的叠加， 此时: N(θ, ϕ) =   ∑ₙ(∫ₛ Jˢ exp( jkr̂(θ, ϕ)⋅rₙ ) dS)         =   ∑ₙ(∫ₛ (∑ₜₙ₌₁³ Iₙfₙ)exp(jkr̂(θ, ϕ)⋅rₙ) dS)         =   ∑ₙ(Sₜ (∑ₜₙ₌₁³ Iₙlₙρₙ/(2Sₙ))exp(jkr̂(θ, ϕ)⋅rₙ) )         =   ∑ₙ(∑ᵢWᵢ(∑ₜₙ₌₁³ Iₙlₙρₙ/2)exp(jkr̂(θ, ϕ)⋅rₙ) )\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.reOrderBasisFunctionAndGeoInfo!-Union{Tuple{VCellT}, Tuple{BFT}, Tuple{IT}, Tuple{Vector{IT}, Vector{VCellT}, Vector{BFT}}} where {IT<:Integer, BFT<:BasisFunctionType, VCellT<:VSCellType}","page":"API","title":"MoM_Kernels.reOrderBasisFunctionAndGeoInfo!","text":"根据按八叉树重新排序的id重排基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.reOrderBasisFunctionAndGeoInfo!-Union{Tuple{VCellT}, Tuple{IT}, Tuple{Vector{IT}, Vector{VCellT}, Val{:PWC}}} where {IT<:Integer, VCellT<:VSCellType}","page":"API","title":"MoM_Kernels.reOrderBasisFunctionAndGeoInfo!","text":"根据按八叉树重新排序的id重排基函数信息，此函数适用于 PWC 基函数的情况\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.reOrderBasisFunctionAndGeoInfo!-Union{Tuple{VT2}, Tuple{VT1}, Tuple{IT}, Tuple{Vector{IT}, Vector{VT1}, Vector{VT2}}} where {IT<:Integer, VT1<:(AbstractVector), VT2<:(AbstractVector)}","page":"API","title":"MoM_Kernels.reOrderBasisFunctionAndGeoInfo!","text":"根据按八叉树重新排序的id重排基函数信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.reOrderCubeID!-Union{Tuple{LV}, Tuple{Integer, Dict{Int64, LV}, Dict{Int64, Vector{Int64}}}} where LV<:MoM_Kernels.AbstractLevel","page":"API","title":"MoM_Kernels.reOrderCubeID!","text":"根据排序后的新id重新排列子层盒子以及盒子的邻盒子信息，以将同一个父盒子层的盒子相邻排列，这样有利于计算 更新的量：父层盒子的kidsInterval， 本层的盒子顺序，本层盒子的邻盒子id\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.record_memorys-Tuple{Any}","page":"API","title":"MoM_Kernels.record_memorys","text":"展示\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.restore_infos-Tuple{}","page":"API","title":"MoM_Kernels.restore_infos","text":"restore_infos()\n记录各部分内存和各阶段计算时间。\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.saveCubes-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.saveCubes","text":"saveCubes(cubes, nchunk = ParallelParams.nprocs; name, dir=\"\", kcubeIndices = nothing)\n\n保存盒子。\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.saveCurrent-Tuple{Any}","page":"API","title":"MoM_Kernels.saveCurrent","text":"保存电流系数\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.saveGeosInfoChunks-Tuple{AbstractVector, Any, AbstractString, Int64}","page":"API","title":"MoM_Kernels.saveGeosInfoChunks","text":"saveGeosInfoChunks(geos::AbstractVector, cubes, name::AbstractString, nchunk::Int; dir = \"\")\n\n将几何信息保存在 TBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.saveLevel","page":"API","title":"MoM_Kernels.saveLevel","text":"saveLevel(level, np = ParallelParams.nprocs; dir=\"\", kcubeIndices = nothing)\n\n保存层信息。\n\nTBW\n\n\n\n\n\n","category":"function"},{"location":"api/#MoM_Kernels.saveOctree-Tuple{Any}","page":"API","title":"MoM_Kernels.saveOctree","text":"saveOctree(octree; dir=\"\")\n\n保存八叉树。\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.saveVec2Chunks-Tuple{AbstractVector, AbstractString, Any}","page":"API","title":"MoM_Kernels.saveVec2Chunks","text":"saveVec2Chunks(y::AbstractVector, name::AbstractString, indices; dir = \"\")\n\n把向量分块保存。\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.saveVec2Chunks-Tuple{AbstractVector, AbstractString, Int64}","page":"API","title":"MoM_Kernels.saveVec2Chunks","text":"saveVec2Chunks(y::AbstractVector, name::AbstractString, nchunk::Int; dir = \"\")\n\n把向量分块保存。\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.searchNearCubes-Union{Tuple{IT}, Tuple{Matrix{IT}, Integer}} where IT<:Integer","page":"API","title":"MoM_Kernels.searchNearCubes","text":"用于寻找邻盒子的函数 输入 cubesID3D::Matrix{Int}，(n×3)盒子在本层的三维坐标 levelID::Integer       层编号，（定义大盒子为（“0” 层），叶层为第“n”层\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setBFInterval!-Union{Tuple{LV}, Tuple{Integer, Dict{Int64, LV}}} where LV<:MoM_Kernels.AbstractLevel","page":"API","title":"MoM_Kernels.setBFInterval!","text":"根据已经排序好的层的盒子信息，从叶层到顶层更新盒子包含的基函数区间\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setBigCube-Union{Tuple{FT}, Tuple{Matrix{FT}, FT}} where FT<:Real","page":"API","title":"MoM_Kernels.setBigCube","text":"计算包围目标的大盒子信息 输入： nodes::Matrix{FT}，大小为 (3, n) 的用于分割成八叉树的空间点，如基函数的中心坐标，或者为构成网格的所有点 leafCubeEdgel::FT，叶层盒子边长，用于计算总层数和大盒子的坐标信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setGeoIDsInLeafCubes!-Union{Tuple{CBF}, Tuple{Any, Vector{CBF}}} where CBF<:ConstBasisFunction","page":"API","title":"MoM_Kernels.setGeoIDsInLeafCubes!","text":"用于设置给定层的盒子中包含的几何体，采用常数基函数时，同一个盒子不会出现重复值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setGeoIDsInLeafCubes!-Union{Tuple{LBF}, Tuple{Any, Vector{LBF}}} where LBF<:LinearBasisFunction","page":"API","title":"MoM_Kernels.setGeoIDsInLeafCubes!","text":"用于设置给定层的盒子中包含的几何体，采用 RWG、SWG、RBF 基函数时，八叉树分组依据为基函数， 同一个几何体会被分在不同的基函数上会被分入入不同的盒子，因此邻盒子中的几何体 id 大概率出现重复值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setGeoIDsInLeafCubes!-Union{Tuple{VT}, Tuple{Any, Vector{VT}}} where VT<:(AbstractVector)","page":"API","title":"MoM_Kernels.setGeoIDsInLeafCubes!","text":"用于设置给定层的盒子中包含的几何体，采用 RWG、SWG、RBF 基函数时，八叉树分组依据为基函数， 同一个几何体会被分在不同的基函数上会被分入入不同的盒子，因此邻盒子中的几何体 id 大概率出现重复值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setKidLevelFarNeighbors!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.setKidLevelFarNeighbors!","text":"寻找子层的远亲盒子 输入:: thisLevel::LevelInfo{IT, FT, IPT}, 本层信息 kidLevel::LevelInfo{IT, FT, IPT}， 子层信息\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setLevelInfo!-Union{Tuple{FT}, Tuple{Integer, Any, FT, StaticArraysCore.StaticArray{Tuple{3}, FT, 1}}} where FT<:Real","page":"API","title":"MoM_Kernels.setLevelInfo!","text":"非叶层LevelInfo的构造函数，输入为空间三维坐标数组 levelID::计算层的id leafnodes::Matrix{FT},大小为 (3, n) 的用于分割成八叉树的空间点，如基函数的中心坐标 cubeEdgel::FT，本层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setLevelInfo!-Union{Tuple{FT}, Tuple{Integer, Matrix{FT}, FT, StaticArraysCore.StaticArray{Tuple{3}, FT, 1}}} where FT<:Real","page":"API","title":"MoM_Kernels.setLevelInfo!","text":"叶层LevelInfo的构造函数，输入为空间三维坐标数组 nLevels::IT，层 数，亦为叶层层ID leafnodes::Matrix{FT},大小为 (3, n) 的用于分割成八叉树的空间点，如基函数的中心坐标 cubeEdgel::FT，叶层盒子边长 bigCubeLowerCoor::Vec3D{FT}， 大盒子的角坐标\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setLevelTransFactor!-Union{Tuple{LV}, Tuple{Int64, Dict{Int64, LV}}} where LV<:MoM_Kernels.AbstractLevel","page":"API","title":"MoM_Kernels.setLevelTransFactor!","text":"计算 第“2”层 到 叶 层的转移因子， 转移因子只存在于远亲组，每层远亲组最多有 7^3 - 3^3 = 316种结果\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setLevelsCubesKidsIn8!-Union{Tuple{LV}, Tuple{Integer, Dict{Int64, LV}}} where LV<:MoM_Kernels.AbstractLevel","page":"API","title":"MoM_Kernels.setLevelsCubesKidsIn8!","text":"计算（nLevel-1）-2 层每层的非空盒子的非空子盒子在其8个子盒子中的位置\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setLevelsShiftFactor!-Union{Tuple{LV}, Tuple{Int64, Dict{Int64, LV}}} where LV<:MoM_Kernels.AbstractLevel","page":"API","title":"MoM_Kernels.setLevelsShiftFactor!","text":"本函数用于给输入的本(level)层的盒子与其子盒子之间计算相移因子， 由盒子排列的规律性和相移因子的对称性，可知： 只需要计算8个相移因子，即可用于所有盒子到其子盒子的相移， 且这八个盒子关于原点对称的两两之间的相移因子为共轭关系 计算完成直接保存在 level 不再返回\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.setVSC₁₂₃ⁿ!-Tuple{}","page":"API","title":"MoM_Kernels.setVSC₁₂₃ⁿ!","text":"setVSC₁₂₃ⁿ!()\n\n计算体奇异性三个系数。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.set_Interpolation_Method!-Tuple{Any}","page":"API","title":"MoM_Kernels.set_Interpolation_Method!","text":"设置插值算法\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.set_leafCubeSize!-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Kernels.set_leafCubeSize!","text":"设置叶层盒子边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.singularF1-Union{Tuple{FT}, NTuple{4, FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Kernels.singularF1","text":"singularF1(a::FT, b::FT, c::FT, d::FT) where{FT<:AbstractFloat}\n\n计算边长为a, b, c, d的四边形重合时的奇异性F1项，即 intintfrac1RdS 的解析值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.singularF1-Union{Tuple{FT}, Tuple{FT, FT, FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Kernels.singularF1","text":"singularF1(a::FT, b::FT, c::FT) where{FT<:AbstractFloat}\n\n计算边长为a, b, c的三角形重合时的奇异性F1项，即 intintfrac1RdS 的解析值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.singularF21-Union{Tuple{FT}, NTuple{4, FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Kernels.singularF21","text":"singularF21(a::FT, b::FT, c::FT, area2::FT) where{FT<:AbstractFloat}\n\n计算边长为a, b, c，面积平方为area2的三角形重合时的奇异性F2项，即 intintfracboldsymbolrho_mcdotboldsymbolrho_nRdS 的解析值，该函数处理 m==n 即基函数自作用的情况。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.singularF22-Union{Tuple{FT}, NTuple{4, FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Kernels.singularF22","text":"singularF21(a::FT, b::FT, c::FT, area2::FT) where{FT<:AbstractFloat}\n\n计算边长为a, b, c，面积平方为area2的三角形重合时的奇异性F2项，即 intintfracboldsymbolrho_mcdotboldsymbolrho_nRdS 的解析值，该函数处理 m!=n 即同一三角形的不同基函数作用的情况。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sizeChunks2idxs-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.sizeChunks2idxs","text":"sizeChunks2idxs(Asize, chunks)\n\nBorrowed form DistributedArray.jl, get the slice of matrix\nsize Asize on each dimension with chunks.\n\nTBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.slicedim2mpi-Tuple{Any, Int64}","page":"API","title":"MoM_Kernels.slicedim2mpi","text":"slicedim2mpi(dims, nc::Int)\n\n从 MPIArray4MoMs借的！为的是避免提前引入 MPI 导致在集群上的 bug。 TBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.slicedim2mpi-Tuple{Int64, Int64}","page":"API","title":"MoM_Kernels.slicedim2mpi","text":"slicedim2mpi(sz::Int, nc::Int)\n\n从 MPIArray4MoMs借的！为的是避免提前引入 MPI 导致在集群上的 bug。 TBW\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.solve!-Union{Tuple{T}, Tuple{Union{LinearMaps.LinearMap{T}, MLMFAIterator{T, VT}, AbstractMatrix{T}} where VT, AbstractVector{T}, AbstractVector{T}}} where T<:Number","page":"API","title":"MoM_Kernels.solve!","text":"矩阵方程 Ax=b 复合求解函数 输入值： A::LinearMapType{T}, b::Vector{T} solverT::Symbol  求解器类型\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.solve-Union{Tuple{T}, Tuple{Union{LinearMaps.LinearMap{T}, MLMFAIterator{T, VT}, AbstractMatrix{T}} where VT, AbstractVector{T}}} where T<:Number","page":"API","title":"MoM_Kernels.solve","text":"矩阵方程 Ax=b 复合求解函数 输入值： A::LinearMapType{T}, b::Vector{T} solverT::Symbol  求解器类型\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePl-Union{Tuple{CT}, Tuple{FT}, Tuple{MoM_Kernels.ZnearChunksStruct{CT}, Any}} where {FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.sparseApproximateInversePl","text":"采用多线程计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearChunks::ZnearChunksStruct{CT} cubes::AbstractVector{CubeInfo{IT, FT}} 该函数提供左预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePl-Union{Tuple{CT}, Tuple{FT}, Tuple{Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, AbstractVector}} where {FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.sparseApproximateInversePl","text":"计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearCSC::ZnearT{CT} cubes 该函数提供左预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePl-Union{Tuple{LT}, Tuple{CT}, Tuple{FT}, Tuple{Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, MoM_Kernels.OctreeInfo{FT, LT}}} where {FT<:Real, CT<:Complex{FT}, LT}","page":"API","title":"MoM_Kernels.sparseApproximateInversePl","text":"计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearCSC::::SparseMatrixCSC{CT, Int} octree::Octree{FT} 该函数提供左预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePl-Union{Tuple{LT}, Tuple{CT}, Tuple{Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, LT}} where {CT<:Complex, LT<:MoM_Kernels.AbstractLevel}","page":"API","title":"MoM_Kernels.sparseApproximateInversePl","text":"计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearCSC::::SparseMatrixCSC{CT, Int} level 该函数提供左预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePr-Union{Tuple{CT}, Tuple{FT}, Tuple{Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, AbstractVector}} where {FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.sparseApproximateInversePr","text":"计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearCSC::::SparseMatrixCSC{CT, Int} cubes 该函数提供右预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePr-Union{Tuple{LT}, Tuple{CT}, Tuple{FT}, Tuple{Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, MoM_Kernels.OctreeInfo{FT, LT}}} where {FT<:Real, CT<:Complex{FT}, LT}","page":"API","title":"MoM_Kernels.sparseApproximateInversePr","text":"计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearCSC::::SparseMatrixCSC{CT, Int} octree::Octree{FT} 该函数提供右预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.sparseApproximateInversePr-Union{Tuple{LT}, Tuple{CT}, Tuple{Union{LinearAlgebra.Transpose{CT, SparseArrays.SparseMatrixCSC{CT, Int64}}, SparseArrays.SparseMatrixCSC{CT, Int64}}, LT}} where {CT<:Complex, LT<:MoM_Kernels.AbstractLevel}","page":"API","title":"MoM_Kernels.sparseApproximateInversePr","text":"计算稀疏近似逆 (Sparse Approximate Inverse (SAI)) 的函数 输入为近场阻抗矩阵CSC, 叶层信息 (也可以为非叶层, 但计算量更大)  ZnearCSC::::SparseMatrixCSC{CT, Int} octree::Octree{FT} 该函数提供右预条件\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h1l-Tuple{Integer, Real}","page":"API","title":"MoM_Kernels.spherical_h1l","text":"第一类球汉克尔函数，使用GSL.jl(GNU Scientific Library)，适用于 l 为整数，x 为浮点数时算的更快\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h1l-Union{Tuple{T}, Tuple{Any, T}} where T","page":"API","title":"MoM_Kernels.spherical_h1l","text":"第一类球汉克尔函数，使用 SpecialFunctions.jl， 适用于非整数阶、复数变量，算的较慢，只在计算有耗介质（复数波矢）时调用\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h1l_array-Union{Tuple{T}, Tuple{Any, T}} where T","page":"API","title":"MoM_Kernels.spherical_h1l_array","text":"一次计算 0:lmax 的多阶第一类球汉克尔函数， 保存在数组里\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h1l_array-Union{Tuple{T}, Tuple{Integer, T}} where T<:Real","page":"API","title":"MoM_Kernels.spherical_h1l_array","text":"一次计算 0:lmax 的多阶第一类球汉克尔函数， 保存在数组里\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h2l-Tuple{Integer, Real}","page":"API","title":"MoM_Kernels.spherical_h2l","text":"第二类球汉克尔函数，使用GSL.jl(GNU Scientific Library)，，适用于 l 为整数，x 为浮点数时算的更快\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h2l-Union{Tuple{T}, Tuple{Any, T}} where T","page":"API","title":"MoM_Kernels.spherical_h2l","text":"第二类球汉克尔函数，使用 SpecialFunctions.jl， 适用于非整数阶、复数变量，算的较慢，只在计算有耗介质（复数波矢）时调用\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h2l_array-Union{Tuple{T}, Tuple{Any, T}} where T","page":"API","title":"MoM_Kernels.spherical_h2l_array","text":"一次计算 0:lmax 的多阶第二类球汉克尔函数， 保存在数组里\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.spherical_h2l_array-Union{Tuple{T}, Tuple{Integer, T}} where T<:Real","page":"API","title":"MoM_Kernels.spherical_h2l_array","text":"一次计算 0:lmax 的多阶第二类球汉克尔函数， 保存在数组里\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.transOnLevel!-Tuple{Any}","page":"API","title":"MoM_Kernels.transOnLevel!","text":"层内转移\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.transOnLevels!-Tuple{Any, Any}","page":"API","title":"MoM_Kernels.transOnLevels!","text":"各层内转移\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.truncationLCal-Tuple{FT} where FT<:Real","page":"API","title":"MoM_Kernels.truncationLCal","text":"该函数计算八叉树各层截断项数 输入为本层最小盒子的边长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.truncationLCal-Tuple{}","page":"API","title":"MoM_Kernels.truncationLCal","text":"truncationLCal(;rel_l) where {FT<:Real}\n\n该函数计算八叉树各层截断项数 输入为相对波长\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.volumeSingularityIg-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, HexahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.volumeSingularityIg","text":"volumeSingularityIg(rtveclc::AbstractVector{FT}, volumeCell::HexahedraInfo{IT, FT, CT}) where {IT<:Integer, FT<:Real, CT<:Complex{FT}}\n\n计算场点rgt在体网格volumeCell上的奇异性。 计算结果为：\n\nbeginaligned\nI_gV  = intg(R)dV\n        = -sum_S_id_isum_n^SglrOrderfraccoeffgreen(n)n+2I_RS^n-1\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.volumeSingularityIgIvecg-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.volumeSingularityIgIvecg","text":"volumeSingularityIgIvecg(rtveclc::AbstractVector{FT}, volumeCell::TetrahedraInfo{IT, FT, CT}) where {IT<:Integer, FT<:Real, CT<:Complex{FT}}\nvolumeSingularityIgIvecg(rtveclc::AbstractVector{FT}, volumeCell::HexahedraInfo{IT, FT, CT}) where {IT<:Integer, FT<:Real, CT<:Complex{FT}}\n\n计算场点rgt在体网格volumeCell上的奇异性。 计算结果为：\n\nbeginaligned\nI_gV  = intg(R)dV\n        = -sum_S_id_isum_n^SglrOrderfraccoeffgreen(n)n+2I_RS^n-1\nboldsymbolI_gV  = intboldsymbolRg(R)dV\n        = -sum_S_ihatbmn_i sum_n=0^SglrOrderfraccoeffgreen(n)n+1I^n+1_RS\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.volumeSingularityLOpDyad-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{AbstractVector{FT}, TetrahedraInfo{IT, FT, CT}}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Kernels.volumeSingularityLOpDyad","text":"volumeSingularityLOpDyad(rtveclc::AbstractVector{FT}, volumeCell::TetrahedraInfo{IT, FT, CT}) where {IT<:Integer, FT<:Real, CT<:Complex{FT}}\nvolumeSingularityLOpDyad(rtveclc::AbstractVector{FT}, volumeCell::HexahedraInfo{IT, FT, CT}) where {IT<:Integer, FT<:Real, CT<:Complex{FT}}\n\n计算场点rtveclc在体网格volumeCell上的并矢格林函数奇异性。 计算结果为：\n\nbeginaligned\noverlineI_V  = int(k^2 I + )G(R) dV\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Kernels.writeZtt!-Union{Tuple{GT}, Tuple{T}, Tuple{Any, Any, T, GT, Bool}} where {T<:Number, GT<:VolumeCellType}","page":"API","title":"MoM_Kernels.writeZtt!","text":"为适应类型变化而将写入部分单独封装\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.EDGEVmINTriVsID","page":"API","title":"MoM_Basics.EDGEVmINTriVsID","text":"三角形在构建时构成第i个边的两个点为三角形中的除了第i个点的两个点，以下为索引构成第i个边的第一个点（计算边向量被 - 掉）时采用的对应点\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.EDGEVpINTriVsID","page":"API","title":"MoM_Basics.EDGEVpINTriVsID","text":"三角形在构建时构成第i个边的两个点为三角形中的除了第i个点的两个点，以下为索引构成第i个边的第二个点（计算边向量时用于减去第二个点 掉）时采用的对应点\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.ExcitingSources","page":"API","title":"MoM_Basics.ExcitingSources","text":"复合激励类\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.GQ1DID2GQ3DIDVector","page":"API","title":"MoM_Basics.GQ1DID2GQ3DIDVector","text":"构建从六面体的 高斯求积线性索引 映射到 三维索引的数组\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.GQPNQuad","page":"API","title":"MoM_Basics.GQPNQuad","text":"六面体边界四边形正常处理高斯求积时高斯求积点数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.GQPNQuad1D","page":"API","title":"MoM_Basics.GQPNQuad1D","text":"六面体边界四边形 1 维度高斯求积点数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.GQPNQuad1DSSglr","page":"API","title":"MoM_Basics.GQPNQuad1DSSglr","text":"处理超奇异性时六面体边界四边形 1 维度高斯求积点数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.GQPNQuad1DSglr","page":"API","title":"MoM_Basics.GQPNQuad1DSglr","text":"处理奇异性时六面体边界四边形 1 维度高斯求积点数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.GQPNQuadSSglr","page":"API","title":"MoM_Basics.GQPNQuadSSglr","text":"六面体边界四边形处理超奇异性时高斯求积点数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.GQPNQuadSglr","page":"API","title":"MoM_Basics.GQPNQuadSglr","text":"六面体边界四边形处理奇异性时高斯求积点数。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.Params","page":"API","title":"MoM_Basics.Params","text":"保存仿真参数的实例。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.Precision","page":"API","title":"MoM_Basics.Precision","text":"创建实例控制精度\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.QuadGQInfo","page":"API","title":"MoM_Basics.QuadGQInfo","text":"六面体边界四边形正常处理高斯求积信息。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.QuadGQInfoSSglr","page":"API","title":"MoM_Basics.QuadGQInfoSSglr","text":"六面体边界四边形处理超奇异性高斯求积信息。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.QuadGQInfoSglr","page":"API","title":"MoM_Basics.QuadGQInfoSglr","text":"六面体边界四边形处理奇异性高斯求积信息。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.SimulationParams","page":"API","title":"MoM_Basics.SimulationParams","text":"非数值仿真参数实例\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.VSBFTypes","page":"API","title":"MoM_Basics.VSBFTypes","text":"创建常数实例保存仿真时的面、体基函数类型。\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.Vec3IdxCircle","page":"API","title":"MoM_Basics.Vec3IdxCircle","text":"1-3 的循环\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.facen2OppositeID","page":"API","title":"MoM_Basics.facen2OppositeID","text":"六面体的六个面的对面\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.facesVertIDs","page":"API","title":"MoM_Basics.facesVertIDs","text":"六面体的六个面的端点\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.memory","page":"API","title":"MoM_Basics.memory","text":"程序内存记录字典\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.oppFacesVertIDs","page":"API","title":"MoM_Basics.oppFacesVertIDs","text":"六面体的六个面的 对面的 端点\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.timer","page":"API","title":"MoM_Basics.timer","text":"程序计时器字典\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.uv2FreeVnsDict","page":"API","title":"MoM_Basics.uv2FreeVnsDict","text":"从四边形的 uv 坐标映射到 自由端的 id\n\n\n\n\n\n","category":"constant"},{"location":"api/#MoM_Basics.AbstractAntennaArray","page":"API","title":"MoM_Basics.AbstractAntennaArray","text":"阵列天线抽象类\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.AntennaArray","page":"API","title":"MoM_Basics.AntennaArray","text":"AntennaArray{FT<:Real, AT, N} <: AbstractAntennaArray\n\n机扫阵列天线 (mechanically scanned array, MSA)、相控阵 (Phased Array)阵列天线 orient 采用的是欧拉角，参考eulerRotationMat 注意阵列初始指向由提供的天线单元合成，作为阵列只提供指向旋转。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.AntennaArray-Union{Tuple{AbstractArray{AT, N}}, Tuple{N}, Tuple{AT}} where {AT, N}","page":"API","title":"MoM_Basics.AntennaArray","text":"AntennaArray(antennas::AbstractArray{AT, N}; center = zero(MVec3D{Precison.FT}), orient = (0., 0., 0.)) where {AT, N}\n\n初始化阵列天线，默认为方阵。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.AntennaType","page":"API","title":"MoM_Basics.AntennaType","text":"天线抽象类\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.BasisFunctionType","page":"API","title":"MoM_Basics.BasisFunctionType","text":"基函数抽象类型\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.ConstBasisFunction","page":"API","title":"MoM_Basics.ConstBasisFunction","text":"常数基抽象类\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.ExcitingSource","page":"API","title":"MoM_Basics.ExcitingSource","text":"激励源抽象类\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.HexahedraInfo","page":"API","title":"MoM_Basics.HexahedraInfo","text":"HexahedraInfo{IT<: Integer, FT<:AbstractFloat, CT<:Complex} <: VolumeCellType{IT, FT, CT}\n\n六面体信息结构体：\n\nhexaID      ::IT                    编号\nvolume      ::FT                    体积\nε           ::CT                    相对介电常数\nκ           ::CT                    介质对比度\ncenter      ::MVec3D{FT}            中心坐标\nverticesID  ::MVector{8, IT}        所在节点id\nvertices    ::MMatrix{3, 8, FT,24}  六面体4个角点坐标，每列为一个点\nfacesn̂      ::MMatrix{3, 8, FT,24}  四个面的外法向量\nfacesvid    ::MMatrix{3, 8, IT,24}  四个面包含的四个id\nfacesArea   ::MVector{6, FT}        四个面的面积（根据为unitri正负部分赋予正负号）\nfaces       ::Vector{Quads4Hexa{IT, FT}}    四个面的具体信息\ninBfsID     ::Vector{IT}            六面体所在的基函数的ID\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.HexahedraInfo-Union{Tuple{}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}","page":"API","title":"MoM_Basics.HexahedraInfo","text":"HexahedraInfo{IT, FT, CT}(hexaID::IT = zero(IT)) where {IT <: Integer, FT<:AbstractFloat, CT<:Complex}\n\nHexahedraInfo 的默认构造函数，除了输入的编号 hexaID 外所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.HexahedraMesh","page":"API","title":"MoM_Basics.HexahedraMesh","text":"HexahedraMesh{IT, FT} <: MeshDataType\n\n六面体网格文件，包括六面体数 hexnum、节点 node、构成六面体的节点 id 数组 hexahedras 等信息。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.LinearBasisFunction","page":"API","title":"MoM_Basics.LinearBasisFunction","text":"线性基抽象类\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.MagneticDipole","page":"API","title":"MoM_Basics.MagneticDipole","text":"MagneticDipole(id = 0; Iml = 0., phase = 0., orient = zero(MVec3D{Float32}), centerlc = zero(MVec3D{Float32}), centergb = zero(MVec3D{Float32}))\n\n精度可变的 MagneticDipole 构造函数\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.MagneticDipole-2","page":"API","title":"MoM_Basics.MagneticDipole","text":"MagneticDipole{FT<: Real}<:AntennaType\n\n磁偶极子天线类型。\n\nid      ::Integer               编号\nIml     ::Complex{FT}           磁流线值\nV       ::FT                    磁流线幅值\nphase   ::FT                    相位\norient  ::MVec3D{FT}            指向欧拉角\ncenterlc::MVec3D{FT}            局部坐标下的中心位置\ncentergb::MVec3D{FT}            全局坐标下的中心位置\nl2gRot  ::MMatrix{3, 3, FT, 9}  局部坐标到全局坐标的旋转变换矩阵\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.MagneticDipole-Union{Tuple{}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Basics.MagneticDipole","text":"    MagneticDipole{FT}(\n    id      ::Int32         =   zero(Int32);        # 编号\n    Iml     ::CT            =   zero(CT),           # 磁流线值\n    phase   ::FT            =   zero(FT),           # 相位（输入弧度(rad)单位）\n    orient  ::MVec3D{FT}    =   zero(MVec3D{FT}),   # 指向欧拉角\n    centerlc::MVec3D{FT}    =   zero(MVec3D{FT}),   # 局部坐标下的中心位置\n    centergb::MVec3D{FT}    =   zero(MVec3D{FT}),   # 全局坐标下的中心位置\n    I0S     ::FT            =   zero(FT),           # 电流环幅值\n    unit                    =   :rad    ) \n    where{FT <: Real, CT <: Complex{FT}}\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.MeshDataType","page":"API","title":"MoM_Basics.MeshDataType","text":"网格数据抽象类型\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.MeshFormat","page":"API","title":"MoM_Basics.MeshFormat","text":"网格文件抽象类型\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.MeshNodeTriTetraHexa","page":"API","title":"MoM_Basics.MeshNodeTriTetraHexa","text":"MeshNodeTriTetraHexa{IT, FT} <: MeshDataType\n\n三角形、四面体、六面体混合网格数据类型：\n\ngeonum      ::Int           包含的所有网格元的数量\nmeshT       ::DataType      网格类型 单一的以其网格类型表示，混合以 VSCellType 表示\ntrinum      ::Int           包含的三角形数量\ntetranum    ::Int           包含的四面体数量\nhexanum     ::Int           包含的六面体数量\nnode        ::Array{FT, 2}  节点坐标数组(3*nodenum)\ntriangles   ::Array{IT, 2}  三角形包含的nodeid数组:(3*trinum)\ntetrahedras ::Array{IT, 2}  四面体包含的nodeid数组:(4*tetranum)\nhexahedras  ::Array{IT, 2}  六面体包含的nodeid数组:(6*hexanum)\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.NasMesh","page":"API","title":"MoM_Basics.NasMesh","text":".nas 网格文件类型。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.PWC","page":"API","title":"MoM_Basics.PWC","text":"PWC{IT<:Integer , FT<:AbstractFloat} <: ConstBasisFunction\n\nPWC 基函数复合类型：\n\nbfID        ::IT            基函数编号\ninGeo       ::IT            基函数所在两个四面体编号\ncenter      ::MVec3D{FT}    基函数中心，用于八叉树分组\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.PWC-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.PWC","text":"PWC{IT, FT}() where {IT <: Integer, FT<:AbstractFloat}\n\nPWC 的默认构造函数，所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.ParamsType","page":"API","title":"MoM_Basics.ParamsType","text":"ParamsType{FT<:AbstractFloat, CT<:Complex{FT}}\n\n创建参数类型以方便保存仿真参数并控制精度：\n\nfrequency   ::FT        频率\nω_0         ::FT        角频率\nK_0         ::FT        波数\nλ_0         ::CT        波长\nJη_0divK    ::CT        常数\nJK_0        ::CT        常数\nk²          ::FT        常数\ndivJω       ::CT        常数\nmk²div9     ::FT        常数\nmJη_0div4πK ::CT        常数\nC4divk²     ::FT        常数\nJKηdiv16π   ::CT        常数\ndiv9Jω      ::CT        常数\nRsglr       ::FT        处理奇异性的相对距离阈值\nresultDir   ::String    存放结果的位置\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.ParamsType-Union{Tuple{CT}, Tuple{FT}} where {FT<:AbstractFloat, CT<:Complex{FT}}","page":"API","title":"MoM_Basics.ParamsType","text":"ParamsType{FT, CT}(frequency::FT) where{FT<:AbstractFloat, CT<:Complex{FT}}\nParamsType(frequency::FT) where {FT<:AbstractFloat}\nParamsType{FT}(frequency) where {FT<:AbstractFloat}\n\n输入频率创建仿真参数实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.PlaneWave","page":"API","title":"MoM_Basics.PlaneWave","text":"PlaneWave{FT<:Real}<:ExcitingSource\n\n平面波源：\n\nθ   ::FT            球坐标角度θ\nϕ   ::FT            球坐标角度ϕ\nα   ::FT            波极化方向相对于 θhat_source 绕K̂_v旋转的角度\nf   ::FT            波频率\nV   ::FT            波激励幅度\nE_v ::SVec3D{FT}    入射波电场极化矢量\nk̂   ::SVec3D{FT}    入射波波矢向量\n\n默认构造函数：\n\nPlaneWave{FT}(θ::FT, ϕ::FT, α::FT, V::FT = one(FT))\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.PlaneWave-Union{Tuple{FT}, Tuple{Any, Any, Any}, NTuple{4, Any}} where FT","page":"API","title":"MoM_Basics.PlaneWave","text":"PlaneWave{FT}(θ, ϕ, α, V = one(FT)) where {FT}\n\n类型自动转换的 PlaneWave 构造函数。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.PrecisionT","page":"API","title":"MoM_Basics.PrecisionT","text":"创建类型用于控制程序精度\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.Quads4Hexa","page":"API","title":"MoM_Basics.Quads4Hexa","text":"Quads4Hexa{IT<: Integer, FT<:AbstractFloat} <: SurfaceCellType{IT, FT}\n\n单个构成六面体的四边形信息：\n\nisbd        ::Bool                  是否在体区域边界，\nδκ          ::Complex{FT}           介质对比度变化量，\nvertices    ::MMatrix{3, 4, FT, 12} 四边形 4 个角点坐标，每列为一个点，\nedgel       ::MVector{4, FT}        四个边长，\nedgev̂       ::MMatrix{3, 4, FT, 12} 四个边的单位指向向量，\nedgen̂       ::MMatrix{3, 4, FT, 12} 四个边的单位外法向量。\n\n合理安排位置后，四个基函数的自由端即为四边形四个点的顺序。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.Quads4Hexa-Union{Tuple{FT}, Tuple{FT, FT}} where FT","page":"API","title":"MoM_Basics.Quads4Hexa","text":"(q::Quads4Hexa)(u::FT, v::FT) where {FT}\n\n计算六面体边界四边形在局部坐标 (u, v) 下的点。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.Quads4Hexa-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.Quads4Hexa","text":"Quads4Hexa{IT, FT}() where {IT <: Integer, FT<:AbstractFloat}\n\nQuads4Hexa的默认构造函数，默认为边界，其它所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.RBF","page":"API","title":"MoM_Basics.RBF","text":"RBF{IT<:Integer , FT<:AbstractFloat} <: LinearBasisFunction\n\n屋顶基函数 (Rooftop basis function, RBF) 基函数复合类型：\n\nisbd        ::Bool              是否为边界元即半基函数，布尔类型\nbfID        ::IT                基函数编号，整形\ninGeo       ::MVector{2, IT}    基函数所在两个六面体编号（半基函数为1个，赋值成一样的两个），长度为2的向量数组\ninGeoID     ::MVector{2, IT}    基函数在两个六面体中的局部编号（半基函数为1个，赋值成一样的两个），取值1:4，长度为2的向量数组\ncenter      ::MVec3D{FT}        基函数中心，用于八叉树分组\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.RBF-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.RBF","text":"RBF{IT, FT}() where {IT <: Integer, FT<:AbstractFloat}\n\nRBF 的默认构造函数，所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.RWG","page":"API","title":"MoM_Basics.RWG","text":"RWG{IT<:Integer , FT<:AbstractFloat} <: LinearBasisFunction\n\nRWG基函数复合类型：\n\nisbd        ::Bool              是否为边界元即半基函数，布尔类型\nbfID        ::IT                基函数编号，整形\nedgel       ::FT                基函数边长，浮点型\ninGeo       ::MVector{2, IT}    基函数所在两个三角形编号（半基函数为1个，赋值成一样的两个），长度为2的向量数组\ninGeoID     ::MVector{2, IT}    基函数在两个上面三角形中的局部编号（半基函数为1个，赋值成一样的两个），取值1:3，长度为2的向量数组\ncenter      ::MVec3D{FT}        基函数中心，用于八叉树分组\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.RWG-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.RWG","text":"RWG{IT, FT}()where {IT <: Integer, FT<:AbstractFloat}\n\nRWG 的默认构造函数，默认非面的边界，所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.SWG","page":"API","title":"MoM_Basics.SWG","text":"SWG 基函数复合类型参数解释：\n\nisbd        ::Bool              是否为边界元即半基函数\nbfID        ::IT                基函数编号，整形\ninGeo       ::MVector{2, IT}    基函数所在两个四面体编号（半基函数为1个，赋值成一样的两个），长度为2的向量数组\ninGeoID     ::MVector{2, IT}    基函数在两个四面体中的局部编号（半基函数为1个，赋值成一样的两个），取值1:4，长度为2的向量数组\ncenter      ::MVec3D{FT}        基函数公共面中心，用于八叉树分组\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.SWG-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.SWG","text":"SWG{IT, FT}() where {IT <: Integer, FT<:AbstractFloat}\n\nSWG 的默认构造函数，所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.SimulationParamsType","page":"API","title":"MoM_Basics.SimulationParamsType","text":"SimulationParamsType\n\n非数值仿真参数信息：\n\nresultDir   ::String        结果文件夹路径\nieT         ::Symbol        积分方程类型，包括 EFIE, MFIE, CFIE等\nmeshfilename::String        网格文件名称\nmeshunit    ::Symbol        网格文件单位\nSHOWIMAGE   ::Bool          根是否要在前端显示图片\ndiscreteVar ::String        离散的体未知量类型，支持位移电流 `\"D\"` 或等效电流 `\"J\"`\nsbfT        ::Symbol        面基函数类型，目前仅支持 `:RWG`\nvbfT        ::Symbol        体基函数类型，目前支持 `:SWG, :RBF, :PWC`\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.SimulationParamsType-Tuple{}","page":"API","title":"MoM_Basics.SimulationParamsType","text":"SimulationParamsType(;ieT::Symbol=:EFIE, meshfilename::String = \"\", meshunit::Symbol = :mm, \nSHOWIMAGE = true, discreteVar = \"D\", sbfT = :RWG, vbfT = :nothing)\n\nSimulationParamsType 的默认构造函数。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.SurfaceCellType","page":"API","title":"MoM_Basics.SurfaceCellType","text":"面元\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.TetrahedraInfo","page":"API","title":"MoM_Basics.TetrahedraInfo","text":"TetrahedraInfo{IT<: Integer, FT<:AbstractFloat, CT<:Complex} <: VolumeCellType{IT, FT, CT}\n\n四面体信息结构体：\n\ntetraID     ::IT                    编号\nvolume      ::FT                    体积\nε           ::CT                    相对介电常数\nκ           ::CT                    介质对比度\ncenter      ::MVec3D{FT}            中心坐标\nverticesID  ::MVector{4, IT}        所在节点id\nvertices    ::MMatrix{3, 4, FT, 12} 四面体4个角点坐标，每列为一个点\nfacesn̂      ::MMatrix{3, 4, FT, 12} 四个面的外法向量\nfacesvid    ::MMatrix{3, 4, IT, 12} 四个面包含的三个id\nfacesArea   ::MVector{4, FT}        四个面的面积（根据为unitri正负部分赋予正负号）\nfaces       ::Vector{Tris4Tetra{IT, FT}}    四个面的具体信息\ninBfsID     ::Vector{IT}            四面体所在的基函数的ID\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.TetrahedraInfo-Union{Tuple{}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}","page":"API","title":"MoM_Basics.TetrahedraInfo","text":"TetrahedraInfo{IT, FT, CT}(hexaID::IT = zero(IT)) where {IT <: Integer, FT<:AbstractFloat, CT<:Complex}\n\nTetrahedraInfo 的默认构造函数，除了输入的编号 tetraID 外所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.TetrahedraMesh","page":"API","title":"MoM_Basics.TetrahedraMesh","text":"HexahedraMesh{IT, FT} <: MeshDataType\n\n四面体网格文件，包括四面体数 tetranum、节点 node、构成四面体的节点 id 数组 tetrahedras 等信息。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.TriangleInfo","page":"API","title":"MoM_Basics.TriangleInfo","text":"TriangleInfo{IT<: Integer, FT<:AbstractFloat} <: SurfaceCellType{IT, FT}\n\n三角形信息结构体：\n\ntriID       ::IT                    编号\narea        ::FT                    面积\nverticesID  ::MVector{3, IT}        所在节点id\nvertices    ::MMatrix{3, 3, FT, 9}  三角形3个角点坐标，每列为一个点\ncenter      ::MVec3D{FT}            中心坐标\nfacen̂       ::MVec3D{FT}            面的外法向量\nedgel       ::MVec3D                三边长\nedgev̂       ::MMatrix{3, 3, FT, 9}  三个边的指向向量\nedgen̂       ::MMatrix{3, 3, FT, 9}  三个边的外法向量\ninBfsID     ::MVector{3, IT}        三角形所在的三个基函数的ID\n\n合理安排位置后，三个基函数的自由端即为三角形三个点的顺序。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.TriangleInfo-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.TriangleInfo","text":"TriangleInfo{IT, FT}(triID::IT = zero(IT)) where {IT <: Integer, FT<:AbstractFloat}\n\nTriangleInfo 的默认构造函数，除了输入的编号 triID 外所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.TriangleMesh","page":"API","title":"MoM_Basics.TriangleMesh","text":"TriangleMesh{IT, FT} <: MeshDataType\n\n三角形网格文件，包括三角形数 trinum、节点 node、构成三角形的节点 id 数组 triangles 等信息。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.Tris4Tetra","page":"API","title":"MoM_Basics.Tris4Tetra","text":"TriangleInfo{IT<: Integer, FT<:AbstractFloat} <: SurfaceCellType{IT, FT}\n\n构成四面体的三角形信息结构体：\n\nisbd        ::Bool                  是否在边界上\nδκ          ::Complex{FT}           面两侧介质对比度差值\nvertices    ::MMatrix{3, 3, FT, 9}  三角形3个角点坐标，每列为一个点\nedgel       ::MVec3D{FT}            三边长\nedgev̂       ::MMatrix{3, 3, FT, 9}  三个边的指向向量\nedgen̂       ::MMatrix{3, 3, FT, 9}  三个边的外法向量\n\n合理安排位置后，三个基函数的自由端即为三角形三个点的顺序。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.Tris4Tetra-Union{Tuple{}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.Tris4Tetra","text":"Tris4Tetra{IT, FT}() where {IT <: Integer, FT<:AbstractFloat}\n\nTris4Tetra 的默认构造函数，默认在边界上，其它所有元素置零。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.VSBFTstruct","page":"API","title":"MoM_Basics.VSBFTstruct","text":"创建结构体保存面、体基函数类型。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.VSCellType","page":"API","title":"MoM_Basics.VSCellType","text":"网格体、面元\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.VecCart2SphereMat","page":"API","title":"MoM_Basics.VecCart2SphereMat","text":"VecCart2SphereMat{T} <: FieldVector{3, Vec3D{T}}\n\n矢量坐标系（直角 → 球）转换矩阵\n\nr_hat   ::  Vec3DCart{T}    r 方向的单位向量\nθ_hat   ::  Vec3DCart{T}    θ 方向的单位向量\nϕ_hat   ::  Vec3DCart{T}    ϕ 方向的单位向量\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.VecCart2SphereMat-Union{Tuple{θϕInfo{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Basics.VecCart2SphereMat","text":"VecCart2SphereMat{FT}(θϕ::θϕInfo{FT}) where{FT<:AbstractFloat}\n\nVecCart2SphereMat在给定方向 θϕ 的构造函数。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.VolumeCellType","page":"API","title":"MoM_Basics.VolumeCellType","text":"体元\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.r̂θϕInfo","page":"API","title":"MoM_Basics.r̂θϕInfo","text":"r̂θϕInfo{FT<:Real}\n\nr̂ θ ϕ 空间角度信息类型，保存以避免大量重复计算\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.r̂θϕInfo-Union{Tuple{AbstractVector{FT}}, Tuple{FT}} where FT<:Real","page":"API","title":"MoM_Basics.r̂θϕInfo","text":"r̂θϕInfo{FT}(rvec::AbstractVector{FT}) where {FT<:Real}\n\n输入直角坐标角度 rvec 构造 r̂θϕInfo 实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.r̂θϕInfo-Union{Tuple{}, Tuple{FT}, Tuple{FT, FT}} where FT<:Real","page":"API","title":"MoM_Basics.r̂θϕInfo","text":"r̂θϕInfo(θ::FT = zero(FT), ϕ::FT = zero(FT)) where {FT<:Real}\nr̂θϕInfo(θ::∠Info{FT}, ϕ::∠Info{FT}) where {FT<:Real}\nr̂θϕInfo(θ::FT, ϕ::∠Info{FT}) where {FT<:Real}\nr̂θϕInfo(θ::∠Info{FT}, ϕ::FT) where {FT<:Real}\n\nr̂θϕInfo 的构造函数 输入角度 θ 和 ϕ 构造 r̂θϕInfo 实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.θϕInfo","page":"API","title":"MoM_Basics.θϕInfo","text":"θϕInfo{FT<:Real}\n\nθ ϕ 空间角度信息类型，保存以避免大量重复计算。\n\n\n\n\n\n","category":"type"},{"location":"api/#MoM_Basics.θϕInfo-Union{Tuple{AbstractVector{FT}}, Tuple{FT}} where FT<:Real","page":"API","title":"MoM_Basics.θϕInfo","text":"θϕInfo{FT}(rvec::AbstractVector{FT}) where {FT<:Real}\n\n输入直角坐标角度 rvec 构造 θϕInfo 实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.θϕInfo-Union{Tuple{}, Tuple{FT}, Tuple{FT, FT}} where FT<:Real","page":"API","title":"MoM_Basics.θϕInfo","text":"θϕInfo{FT}(θ::FT = zero(FT), ϕ::FT = zero(FT)) where {FT<:Real}\nθϕInfo(θ::FT, ϕ::FT) where {FT<:Real}\nθϕInfo{FT}(θ::∠Info{FT}, ϕ::∠Info{FT}) where {FT<:Real}\nθϕInfo{FT}(θ::FT, ϕ::∠Info{FT}) where {FT<:Real}\nθϕInfo{FT}(θ::∠Info{FT}, ϕ::FT) where {FT<:Real}\n\n输入角度 θ 和 ϕ 构造 θϕInfo 实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.∠Info","page":"API","title":"MoM_Basics.∠Info","text":"∠Info{FT<:Real}\n\n∠ 空间角度信息类型，保存以避免大量重复计算。\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.:*-Union{Tuple{FT}, Tuple{T}, Tuple{VecCart2SphereMat{FT}, StaticArraysCore.StaticArray{Tuple{3}, T, 1}}} where {T<:Number, FT<:AbstractFloat}","page":"API","title":"Base.:*","text":"Base.:*(c2smat::VecCart2SphereMat{FT}, vec3D::Vec3D{T}) where {T<:Number, FT<:AbstractFloat}\n\n重载 * 函数以计算向量在球坐标下的各个分量\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics._nastran_string_to_float-Tuple{Any}","page":"API","title":"MoM_Basics._nastran_string_to_float","text":"_nastran_string_to_float(string)\n\n解析 .nas 文件中的字符串。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.acrossbcrossc-Tuple{Any, Any, Any}","page":"API","title":"MoM_Basics.acrossbcrossc","text":"acrossbcrossc(a, b, c)\n\n更高效地计算矢量连续叉乘：a  b  c = (ca)b - (cb)a\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.add_phase!-Union{Tuple{FT}, Tuple{MagneticDipole{FT}, Any}} where FT<:Real","page":"API","title":"MoM_Basics.add_phase!","text":"add_phase!(md::MagneticDipole{FT}, phase) where {FT <: Real}\n\n为磁偶极 md 附加相位 phase。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.antennaArray","page":"API","title":"MoM_Basics.antennaArray","text":"antennaArray(arysize, aryorient, dgap = Tuple(fill(Params.λ_0/2, length(arysize)));\nsourceConstructer, sourceT, sourceorientlc[, orientunit=:rad, coefftype = :uniform, arycenter = zero(MVec3D{Precision.FT})])\n\n提供快捷的阵列构建函数。注意此处输入的阵列、单元指向必须为指定的欧拉角 (ZXZ) eulerRotationMat。\n\n\n\n\n\n","category":"function"},{"location":"api/#MoM_Basics.boundaryRBF-Tuple{Meshes.Hexahedron}","page":"API","title":"MoM_Basics.boundaryRBF","text":"boundaryRBF(h::Hexahedron)\n\n重载面的提取顺序以匹配屋顶基函数 (RBF) 在六面体中的面按 \n\nu=1 u=0 v = 1 v = 0 w = 1 w = 0 \n\n的顺序排列。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.byte2other-Tuple{Any, Any}","page":"API","title":"MoM_Basics.byte2other","text":"byte2other(v, mem_unit)\n\n将以字节为单位的内存数据 v 转换为其它单位 mem_unit。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.cart2sphere-Union{Tuple{Vararg{T, 3}}, Tuple{T}} where T","page":"API","title":"MoM_Basics.cart2sphere","text":"cart2sphere(xyz::Vararg{T, 3}) where {T}\n\n将直角坐标 xyz 转换到球坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.cart2sphereMat-Union{Tuple{θϕInfo{FT}}, Tuple{FT}} where FT<:Real","page":"API","title":"MoM_Basics.cart2sphereMat","text":"cart2sphereMat(θϕ::θϕInfo{FT}) where{FT<:Real}\ncart2sphereMat(θ::FT, ϕ::FT) where{FT<:Real}\n\n计算矢量坐标系（直角 → 球）转换矩阵。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.constructFloat2IndexDict-Union{Tuple{AbstractVector{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Basics.constructFloat2IndexDict","text":"constructFloat2IndexDict(floats::AbstractVector{FT}) where {FT<:AbstractFloat}\n\n构建有序（从小到大）浮点数为键，值为该组数构成的的二重字典，字典值为键的二维数组的线性坐标\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.constructGQ1DID2GQ3DIDVector-Tuple{Any}","page":"API","title":"MoM_Basics.constructGQ1DID2GQ3DIDVector","text":"constructGQ1DID2GQ3DIDVector(gqInfo)\n\n构建从六面体体高斯求积点线性索引到三维索引的数组。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.dist-Union{Tuple{FT}, Tuple{AbstractVector{FT}, AbstractVector{FT}}} where FT<:AbstractFloat","page":"API","title":"MoM_Basics.dist","text":"dist(pa::AbstractVector{FT}, pb::AbstractVector{FT})::FT where {FT<:AbstractFloat}\ndist(pa::Vec3D{FT}, pb::Vec3D{FT})::FT where {FT<:AbstractFloat}\ndist(pa::Vec3D{FT})::FT where {FT<:AbstractFloat}\n\n计算两点之间距离，比使用norm函数更高效。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.eulerRMat2αβγ-Tuple{Any}","page":"API","title":"MoM_Basics.eulerRMat2αβγ","text":"eulerRMat2αβγ(l2gMat)\n\n通过局部坐标到全局坐标的旋转矩阵 l2gMat 计算欧拉角。 旋转矩阵按绕 “z轴” → “x轴” → “z轴”的顺序，分别旋转 α, β, γ 度得到，本函数计算对应的三个角度 α, β, γ。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.eulerRotationMat-Union{Tuple{FT}, Tuple{FT, FT, FT}, Tuple{FT, FT, FT, Symbol}} where FT<:Real","page":"API","title":"MoM_Basics.eulerRotationMat","text":"eulerRotationMat(α::FT, β::FT, γ::FT, unit::Symbol) where{FT<:Real}\n\n根据坐标旋转的欧拉角计算旋转矩阵, 定义旋转顺序为： “滚动” → “俯仰” → “偏航”， 即按绕 “z轴” → “x轴” → “z轴”的顺序，分别旋转 α, β, γ 度 Wikipedia-Euler_angles 输入： α, β, γ, 旋转角度信息 unit: 输入角度值单位，默认为 :rad，可选 :deg 输出： rotMat :: SMatrix{3, 3, FT}, 坐标旋转矩阵 rotMat * vec 将 vec 从局部坐标转换回全局坐标\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.eulerRotationMat-Union{Tuple{FT}, Tuple{FT, FT}, Tuple{FT, FT, Symbol}} where FT<:AbstractFloat","page":"API","title":"MoM_Basics.eulerRotationMat","text":"eulerRotationMat(θ::FT, ϕ::FT, unit::Symbol) where{FT<:AbstractFloat}\n\n计算转到给定指向 θ, ϕ 处的旋转矩阵，旋转一步到位，不发生自旋。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.eulerRotationMat-Union{Tuple{FT}, Tuple{StaticArraysCore.StaticArray{Tuple{3}, FT, 1}, FT}, Tuple{StaticArraysCore.StaticArray{Tuple{3}, FT, 1}, FT, Symbol}} where FT<:Real","page":"API","title":"MoM_Basics.eulerRotationMat","text":"eulerRotationMat(axis::Vec3D{FT}, θ::FT, unit::Symbol) where{FT<:Real}\n\n计算天线阵按给定任意轴 axis, 旋转 θ` 角度的旋转矩阵。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.eulerZunit-Union{Tuple{FT}, Tuple{FT, FT, FT, Symbol}} where FT<:Real","page":"API","title":"MoM_Basics.eulerZunit","text":"eulerZunit(α::FT, β::FT, γ::FT, unit::Symbol) where{FT<:Real}\n\n计算给定欧拉角局部坐标 z 轴在全局坐标中的位置单位向量。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getBFTfromCellT-Union{Tuple{Type{T}}, Tuple{T}} where T<:TriangleInfo","page":"API","title":"MoM_Basics.getBFTfromCellT","text":"根据网格元（如三角形、四边形、四面体、六面体等）获取基函数信息用于快速计算当前单元采用的基函数\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getBFsFromMeshData-Tuple{Any}","page":"API","title":"MoM_Basics.getBFsFromMeshData","text":"getBFsFromMeshData(meshData; sbfT = :nothing, vbfT = :nothing)\n\n通过网格信息 meshData 创建基函数信息。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getCellsBFs-Tuple{Any, Any}","page":"API","title":"MoM_Basics.getCellsBFs","text":"getCellsBFs(meshData, vbfT)\n\n根据读取的网格数据生成网格元 + 基函数信息。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getCellsBFsFromFileName-Tuple{Any}","page":"API","title":"MoM_Basics.getCellsBFsFromFileName","text":"getCellsBFsFromFileName(meshFileName; meshUnit = MeshUnit, sbfT = :RWG, vbfT = :nothing)\n\n通过文件名 meshFileName 直接读取网格元、创建基函数信息。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getCellsFromFileName-Tuple{Any}","page":"API","title":"MoM_Basics.getCellsFromFileName","text":"getCellsFromFileName(meshFileName; meshUnit = MeshUnit, sbfT = :RWG, vbfT = :nothing)\n\n通过文件名 meshFileName 直接读取网格元。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getConnectionMatrix-Tuple{Any}","page":"API","title":"MoM_Basics.getConnectionMatrix","text":"getConnectionMatrix(meshData)\n\n通过 meshData 获取节点与网格元之间的连接稀疏矩阵。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getFreeVIDFromGQ3DID-Tuple{Tuple{Int64, Int64, Int64}, Integer}","page":"API","title":"MoM_Basics.getFreeVIDFromGQ3DID","text":"getFreeVIDFromGQ3DID(GQ3DID::NTuple{3, Int}, i::Integer)\n\n得到第 i 个面所在的基函数的 正常高斯求积 下，三维坐标为 GQ3DID 的高斯求积点的 “自由端r₀” 的序号。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getFreeVIDFromGQ3DIDSSglr-Tuple{Tuple{Int64, Int64, Int64}, Integer}","page":"API","title":"MoM_Basics.getFreeVIDFromGQ3DIDSSglr","text":"getFreeVIDFromGQ3DIDSSglr(GQ3DID::NTuple{3, Int}, i::Integer)\n\n得到第 i 个面所在的基函数的 处理超奇异性时，三维坐标为 GQ3DID 的高斯求积点的 “自由端r₀” 的序号。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getFreeVIDFromGQ3DIDSglr-Tuple{Tuple{Int64, Int64, Int64}, Integer}","page":"API","title":"MoM_Basics.getFreeVIDFromGQ3DIDSglr","text":"getFreeVIDFromGQ3DIDSglr(GQ3DID::NTuple{3, Int}, i::Integer)\n\n得到第 i 个面所在的基函数的 处理奇异性时，三维坐标为 GQ3DID 的高斯求积点的 “自由端r₀” 的序号。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getFreeVns-Tuple{HexahedraInfo, Integer}","page":"API","title":"MoM_Basics.getFreeVns","text":"getFreeVns(hexa::HexahedraInfo, i::Integer)\n\n得到六面体 hexa 第 i 个所在的基函数的 所有自由端( r₀ )。 该面定义为 uvw 坐标中某值为 1(0) 的面， 自由端应定义为在该面的 uvw 坐标中，将该值赋值为 0(1) 时计算得到的点 如 u = 1 的面为六面体的第 (2673) 个点构成的面，r₀ 为 uvw  坐标为 (0 v w) 的点，此点等同于 u = 0 的面的四边形的参数坐标为 (v, w) 的点  在构造 RBF 时面按照 按 u=1 u=0 v = 1 v = 0 w = 1 w = 0 的顺序排列,  因此函数根据输入的面的序号进行计算。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getFreeVnsSSglr-Tuple{HexahedraInfo, Integer}","page":"API","title":"MoM_Basics.getFreeVnsSSglr","text":"getFreeVnsSSglr(hexa::HexahedraInfo, i::Integer)\n\n得到六面体 hexa 处理超奇异性时第 i 个所在的基函数的 所有自由端( r₀ )。 定义详见getFreeVns\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getFreeVnsSglr-Tuple{HexahedraInfo, Integer}","page":"API","title":"MoM_Basics.getFreeVnsSglr","text":"getFreeVns(hexa::HexahedraInfo, i::Integer)\n\n得到六面体 hexa 处理奇异性时第 i 个所在的基函数的 所有自由端( r₀ )。 定义详见getFreeVns\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPHexa-Union{Tuple{IT}, Tuple{HexahedraInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPHexa","text":"getGQPHexa(hexa::HexahedraInfo, ii::IT) where {IT <: Integer}\ngetGQPHexa(hexa::HexahedraInfo)\n\n计算 hexa 正常求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPHexaSSglr-Union{Tuple{IT}, Tuple{HexahedraInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPHexaSSglr","text":"getGQPHexaSSglr(hexa::HexahedraInfo, ii::IT) where {IT <: Integer}\ngetGQPHexaSSglr(hexa::HexahedraInfo)\n\n计算 hexa 处理超奇异性求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPHexaSglr-Union{Tuple{IT}, Tuple{HexahedraInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPHexaSglr","text":"getGQPHexaSglr(hexa::HexahedraInfo, ii::IT) where {IT <: Integer}\ngetGQPHexaSglr(hexa::HexahedraInfo)\n\n计算 hexa 处理奇异性求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPQuad-Union{Tuple{IT}, Tuple{Quads4Hexa, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPQuad","text":"getGQPQuad(quad::Quads4Hexa, ii::IT) where {IT <: Integer}\ngetGQPQuad(quad::Quads4Hexa)\n\n计算 quad 正常求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPQuadSSglr-Union{Tuple{IT}, Tuple{Quads4Hexa, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPQuadSSglr","text":"getGQPQuadSSglr(quad::Quads4Hexa, ii::IT) where {IT <: Integer}\ngetGQPQuadSSglr(quad::Quads4Hexa)\n\n计算 quad 处理超奇异性的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPQuadSglr-Union{Tuple{IT}, Tuple{Quads4Hexa, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPQuadSglr","text":"getGQPQuadSglr(quad::Quads4Hexa, ii::IT) where {IT <: Integer}\ngetGQPQuadSglr(quad::Quads4Hexa)\n\n计算 quad 处理奇异性的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPTetra-Union{Tuple{IT}, Tuple{TetrahedraInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPTetra","text":"getGQPTetra(tetra::TetrahedraInfo, i::IT) where {IT <: Integer}\ngetGQPTetra(tetra::TetrahedraInfo)\n\n计算 tetra 正常求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPTetraSglr-Union{Tuple{IT}, Tuple{TetrahedraInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPTetraSglr","text":"getGQPTetraSglr(tetra::TetrahedraInfo, i::IT) where {IT <: Integer}\ngetGQPTetraSglr(tetra::TetrahedraInfo)\n\n计算 tetra 处理奇异性求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPTri-Union{Tuple{IT}, Tuple{TriangleInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPTri","text":"getGQPTri(tri::TriangleInfo, i::IT) where {IT <: Integer}\ngetGQPTri(tri::TriangleInfo)\n\n计算 tri 正常求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPTri-Union{Tuple{IT}, Tuple{Tris4Tetra, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPTri","text":"getGQPTri(tri::Tris4Tetra, i::IT) where {IT <: Integer}\ngetGQPTri(tri::Tris4Tetra)\n\n计算 tri 正常求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPTriSglr-Union{Tuple{IT}, Tuple{TriangleInfo, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPTriSglr","text":"getGQPTriSglr(tri::TriangleInfo, i::IT) where {IT <: Integer}\ngetGQPTriSglr(tri::TriangleInfo)\n\n计算 tri 处理奇异性求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getGQPTriSglr-Union{Tuple{IT}, Tuple{Tris4Tetra, IT}} where IT<:Integer","page":"API","title":"MoM_Basics.getGQPTriSglr","text":"getGQPTriSglr(tri::Tris4Tetra, i::IT) where {IT <: Integer}\ngetGQPTriSglr(tri::Tris4Tetra)\n\n计算 tri 处理奇异性求积的第 i 个或所有高斯求积坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getHexasInfo-Union{Tuple{FT}, Tuple{IT}, Tuple{HexahedraMesh{IT, FT}, Symbol}} where {IT, FT}","page":"API","title":"MoM_Basics.getHexasInfo","text":"getHexasInfo(hexameshData::HexahedraMesh{IT, FT}, VolumeBFType::Symbol) where{IT, FT}\n\n根据六面体网格信息 hexameshData 和体基函数类型 VolumeBFType 生成网格信息向量 hexasInfo 和基函数信息向量 bfsInfo 。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getMeshData-Tuple{String}","page":"API","title":"MoM_Basics.getMeshData","text":"getMeshData(meshFileName::String; meshUnit=:mm)\n\n读取文件中的节点坐标、三角形点、四面体点、六面体点\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getNodeTriTetraFekoNas-Union{Tuple{T}, Tuple{ST}, Tuple{ST, Type{T}}} where {ST<:AbstractString, T<:AbstractFloat}","page":"API","title":"MoM_Basics.getNodeTriTetraFekoNas","text":"getNodeTriTetraFekoNas(pathname::ST, FT::Type{T}=Precision.FT) where {ST <: AbstractString,T<:AbstractFloat}\n\n读取 .nas 文件中的节点坐标、三角形点、四面体点。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getNodeTriTetraHexaNas-Union{Tuple{T}, Tuple{ST}} where {ST<:AbstractString, T<:AbstractFloat}","page":"API","title":"MoM_Basics.getNodeTriTetraHexaNas","text":"getNodeTriTetraHexaNas(pathname::ST; FT::Type{T}=Precision.FT, meshUnit = :mm) where {ST <: AbstractString,T<:AbstractFloat}\n\n读取 .nas 文件中的节点坐标、三角形点、四面体点、六面体点。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getTetrasInfo-Union{Tuple{FT}, Tuple{IT}, Tuple{MoM_Basics.TetrahedraMesh{IT, FT}, Symbol}} where {IT, FT}","page":"API","title":"MoM_Basics.getTetrasInfo","text":"getTetrasInfo(tetrameshData::TetrahedraMesh{IT, FT}, VolumeBFType::Symbol) where{IT, FT}\n\n根据四面体网格信息 tetrameshData 和体基函数类型 VolumeBFType 生成网格信息向量 tetrasInfo 和基函数信息向量 bfsInfo 。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getTriangleInfo-Union{Tuple{TriangleMesh{IT, FT}}, Tuple{FT}, Tuple{IT}} where {IT, FT}","page":"API","title":"MoM_Basics.getTriangleInfo","text":"getTriangleInfo(trianglemeshData::TriangleMesh{IT, FT}) where{IT, FT}\n\n根据网格信息 trianglemeshData 生成三角形信息 trianglesInfo 、RWG基函数信息 rwgsInfo。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.getdatNodeElementParam-Union{Tuple{T}, Tuple{ST}} where {ST<:AbstractString, T<:AbstractFloat}","page":"API","title":"MoM_Basics.getdatNodeElementParam","text":"getdatNodeElementParam(pathname::ST; FT::Type{T}=Precision.FT, meshUnit = :m) where {ST <: AbstractString,T<:AbstractFloat}\n\n读取 .dat 格式的自定义项目文件。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.globalObs2LocalObs-Union{Tuple{FT}, Tuple{Array{r̂θϕInfo{FT}, 2}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}}} where FT","page":"API","title":"MoM_Basics.globalObs2LocalObs","text":"globalObs2LocalObs(r̂θϕs_obs::Matrix{r̂θϕInfo{FT}}, l2gRot::StaticMatrix{3,3, FT}) where {FT}\n\n根据全局观测空间角度信息 r̂θϕs_obs 计算给定局部至全局坐标旋转矩阵 l2gRot 下局部坐标的观测空间角度信息。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.globalrvec2Local-Union{Tuple{FT}, Tuple{T}, Tuple{AbstractVector{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}, StaticArraysCore.StaticArray{Tuple{3}, FT, 1}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.globalrvec2Local","text":"globalrvec2Local(rvecglobal::Vec3D{T}, l2gRot::StaticMatrix{3,3, FT}, r0InGlobal::Vec3D{FT}) where {T<:Number, FT<:Real}\n\n计算全局向量 rvecglobal 在给定局部至全局坐标旋转矩阵 l2gRot 下的局部坐标，局部坐标的原点在全局坐标的 r0InGlobal 处。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.globalrvec2Local-Union{Tuple{FT}, Tuple{T}, Tuple{AbstractVector{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.globalrvec2Local","text":"globalrvec2Local(rvecglobal::Vec3D{T}, l2gRot::StaticMatrix{3,3, FT}) where {T<:Number, FT<:Real}\n\n计算全局向量 rvecglobal 在给定局部至全局坐标旋转矩阵 l2gRot 下的局部坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.globalrvec2Local-Union{Tuple{FT}, Tuple{T}, Tuple{Matrix{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}, AbstractVector{FT}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.globalrvec2Local","text":"globalrvec2Local(rvecsglobal::Matrix{T}, l2gRot::StaticMatrix{3,3, FT}, r0InGlobal::Vec3D{FT}) where {T<:Number, FT<:Real}\n\n计算全局向量组成的矩阵 rvecsglobal 在给定局部至全局坐标旋转矩阵 l2gRot 下的局部坐标，局部坐标的原点在全局坐标的 r0InGlobal 处。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.globalrvec2Local-Union{Tuple{FT}, Tuple{T}, Tuple{Matrix{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.globalrvec2Local","text":"globalrvec2Local(rvecsglobal::Matrix{T}, l2gRot::StaticMatrix{3,3, FT}) where {T<:Number, FT<:Real}\n\n计算全局向量组成的矩阵 rvecsglobal 在给定局部至全局坐标旋转矩阵 l2gRot 下的局部坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.greenfunc-Tuple{T} where T<:AbstractFloat","page":"API","title":"MoM_Basics.greenfunc","text":"greenfunc(R::T) where {T<:AbstractFloat}\ngreenfunc(pa::Vec3D{T}, pb::Vec3D{T}) where {T<:AbstractFloat}\ngreenfunc(pa::AbstractVector{T}, pb::AbstractVector{T}) where {T<:AbstractFloat}\ngreenfunc(R::T, k::T) where {T<:AbstractFloat}\ngreenfunc(pa::Vec3D{T}, pb::Vec3D{T}, k::T) where {T<:AbstractFloat}\n\n计算归一化自由空间格林函数 g(R) =  exp^-1im*K_0*RR\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.initialize_time_and_mem-Tuple{}","page":"API","title":"MoM_Basics.initialize_time_and_mem","text":"initialize_time_and_mem()\n\n初始化计时器 timer 和内存记录 memory。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.inputBasicParameters-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"MoM_Basics.inputBasicParameters","text":"inputBasicParameters(;frequency::FT = 1e8, ieT::Symbol = :EFIE, CFIEα::FT = 0.6,\nmeshfilename::String = SimulationParams.meshfilename) where {FT<:AbstractFloat}\n\n输入频率参数 frequency，修改其它仿真参数的函数； 积分方程类型参数 ieT，修改计算过程中采用的积分方程； CFIE混合系数 CFIEα、网格文件名 meshfilename。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.localObs2GlobalObs-Union{Tuple{FT}, Tuple{Array{r̂θϕInfo{FT}, 2}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}}} where FT","page":"API","title":"MoM_Basics.localObs2GlobalObs","text":"localObs2GlobalObs(r̂θϕs_obs::Matrix{r̂θϕInfo{FT}}, l2gRot::StaticMatrix{3,3, FT}) where {FT}\n\n根据局部观测空间角度信息 r̂θϕs_obs 计算给定局部至全局坐标旋转矩阵 l2gRot 下全局坐标的观测空间角度信息。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.localrvec2Global-Union{Tuple{FT}, Tuple{T}, Tuple{AbstractVector{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}, StaticArraysCore.StaticArray{Tuple{3}, FT, 1}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.localrvec2Global","text":"localrvec2Global(rvecslocal::Vec3D{T}, l2gRot::StaticMatrix{3,3, FT}, r0InGlobal::Vec3D{FT}) where {T<:Number, FT<:Real}\n\n计算局部向量 rveclocal 在给定局部至全局坐标旋转矩阵 l2gRot 下的全局坐标，局部坐标的原点在全局坐标的 r0InGlobal 处。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.localrvec2Global-Union{Tuple{FT}, Tuple{T}, Tuple{AbstractVector{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.localrvec2Global","text":"localrvec2Global(rvecslocal::Vec3D{T}, l2gRot::StaticMatrix{3,3, FT}) where {T<:Number, FT<:Real}\n\n计算局部向量 rveclocal 在给定局部至全局坐标旋转矩阵 l2gRot 下的全局坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.localrvec2Global-Union{Tuple{FT}, Tuple{T}, Tuple{Matrix{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}, AbstractVector{FT}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.localrvec2Global","text":"localrvec2Global(rvecslocal::Matrix{T}, l2gRot::StaticMatrix{3,3, FT}, r0InGlobal::Vec3D{FT}) where {T<:Number, FT<:Real}\n\n计算局部向量组成的矩阵 rvecslocal 在给定局部至全局坐标旋转矩阵 l2gRot 下的全局坐标，局部坐标的原点在全局坐标的 r0InGlobal 处。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.localrvec2Global-Union{Tuple{FT}, Tuple{T}, Tuple{Matrix{T}, StaticArraysCore.StaticArray{Tuple{3, 3}, FT, 2}}} where {T<:Number, FT<:Real}","page":"API","title":"MoM_Basics.localrvec2Global","text":"localrvec2Global(rvecslocal::Matrix{T}, l2gRot::StaticMatrix{3,3, FT}) where {T<:Number, FT<:Real}\n\n计算局部向量组成的矩阵 rvecslocal 在给定局部至全局坐标旋转矩阵 l2gRot 下的全局坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.modiParams!-NTuple{16, Any}","page":"API","title":"MoM_Basics.modiParams!","text":"modiParams!(   frequency, ω_0, K_0, λ_0, JKη_0, Jη_0divK, JK_0,\n                    k², divJω, mk²div9, mJη_0div4πK, \n                    C4divk², JKηdiv16π, div9Jω, Rsglr, CFIEα)\n\n输入所有参数修改仿真参数的实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.modiSimulationParams!-Tuple{}","page":"API","title":"MoM_Basics.modiSimulationParams!","text":"modiSimulationParams!(;ieT::Symbol=SimulationParams.ieT, \nmeshfilename::String = SimulationParams.meshfilename, \nmeshunit = SimulationParams.meshunit,\nSHOWIMAGE = SimulationParams.SHOWIMAGE,\ndiscreteVar = SimulationParams.discreteVar\n)\n\nieT         ::Symbol, 积分方程类型，包括 EFIE, MFIE, CFIE等\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.nodes2Poles-Union{Tuple{Matrix{FT}}, Tuple{FT}} where FT","page":"API","title":"MoM_Basics.nodes2Poles","text":"nodes2Poles(nodes::Matrix{FT}) where {FT}\n\n将球面散点 nodes 转化为角度信息实例 r̂θϕInfo 数组。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.radiationDirectionCoeff-Union{Tuple{FT}, Tuple{MagneticDipole, θϕInfo{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.radiationDirectionCoeff","text":"radiationDirectionCoeff(md::MagneticDipole{FT}, θϕ::θϕInfo{FT}) where {FT<:Real}\n\n计算方向性系数：D_m(θ ϕ) = 4π U_m(θ ϕ)P_rad。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.radiationIntegralL0-Union{Tuple{FT}, Tuple{MagneticDipole, θϕInfo{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.radiationIntegralL0","text":"radiationIntegralL0(md::MagneticDipole, θϕ::θϕInfo{FT}) where {FT<:Real}\n\n磁偶极子的远场辐射积分计算函数，注意 θϕ 为偶极子的局部坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.radiationIntensityU_m-Union{Tuple{FT}, Tuple{MagneticDipole, θϕInfo{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.radiationIntensityU_m","text":"radiationIntensityU_m(md::MagneticDipole{FT}, θϕ::θϕInfo{FT}) where {FT<:Real}\n\n计算磁流源的辐射强度函数 U_m(θ ϕ) = fracY_08λ_0²(L_θ² + L_ϕ²)。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.radiationPower-Tuple{MagneticDipole}","page":"API","title":"MoM_Basics.radiationPower","text":"radiationPower(md::MagneticDipole{FT}) where {FT<:Real}\n\n计算辐射功率。 P_rad =   U(θ ϕ)sinθ  dθdϕ 对磁偶极子可直接在源缝表面积分： P_rad =  E(r)²(2η₀) dxdy\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.random_rhat-Tuple{}","page":"API","title":"MoM_Basics.random_rhat","text":"random_rhat(; FT = Precision.FT)\n\n随机生成单位向量。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.record_BFsInfo-Tuple{Symbol, Int64}","page":"API","title":"MoM_Basics.record_BFsInfo","text":"record_BFsInfo(bfT::Symbol, nbf::Int; io::IO = Core.stdout)\n\n在 io 中记录基函数类型 bfT 和数量 nbf。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.record_CellInfo","page":"API","title":"MoM_Basics.record_CellInfo","text":"record_CellInfo(io::IO = Core.stdout; ntri = 0, ntetra = 0, nhexa = 0)\nrecord_CellInfo(meshData; io::IO = Core.stdout)\n\n在 io 中记录网格单元数量 ntri, ntetra, nhexa。\n\n\n\n\n\n","category":"function"},{"location":"api/#MoM_Basics.rwgbfConstructerTrianglesInfoModifiers!-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleMesh, Array{TriangleInfo{IT, FT}, 1}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.rwgbfConstructerTrianglesInfoModifiers!","text":"rwgbfConstructerTrianglesInfoModifiers!(trianglemeshData::TriangleMesh, trianglesInfo::Vector{TriangleInfo{IT, FT}}) where {IT<:Integer, FT<:AbstractFloat}\n\n此函数采用排序算法，将每个边的两个点、在三角形中的对点、三角形、基函数等属性信息放在一个大数组中， 通过对不同的属性排序（如按边所在点随数组排序即可将边相同的点放在一起），即可得到基函数分组信息，以此可构造RWG基函数。 函数完成以下功能：\n\n构造基函数类型实例数组（类似结构化数组）rwgsInfo记录基函数相关信息，并作为返回值；\n写入三角形类型实例数组trianglesInfo中关于基函数的信息。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.rwgbfnohalfConstructerTrianglesInfoModifiers!-Union{Tuple{FT}, Tuple{IT}, Tuple{TriangleMesh, Array{TriangleInfo{IT, FT}, 1}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.rwgbfnohalfConstructerTrianglesInfoModifiers!","text":"rwgbfnohalfConstructerTrianglesInfoModifiers!(trianglemeshData::TriangleMesh, trianglesInfo::Vector{TriangleInfo{IT, FT}}) where {IT<:Integer, FT<:AbstractFloat}\n\n此函数与rwgbfConstructerTrianglesInfoModifiers!基本一致，不同在于不生成半基函数。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.saveSimulationParams-Tuple{}","page":"API","title":"MoM_Basics.saveSimulationParams","text":"saveSimulationParams(;meshfilename::String = SimulationParams.meshfilename, \nsbfT::Symbol = SimulationParams.sbfT, vbfT::Symbol = SimulationParams.vbfT)\n\n保存仿真参数到结果文件中。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.second_to_other-Tuple{Any, Any}","page":"API","title":"MoM_Basics.second_to_other","text":"second_to_other(v, time_unit)\n\n将以秒为单位的时间数据 v 转换为其它单位 time_unit。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.selectFreeVnID-Union{Tuple{FT}, Tuple{AbstractVector{FT}, Integer}} where FT","page":"API","title":"MoM_Basics.selectFreeVnID","text":"selectFreeVnID(uvw::AbstractVector{FT}, i::Integer) where {FT}\n\n根据 uvw 计算得到第 i 个面所在的基函数的 正常高斯求积 时 “自由端( r₀ )” 的序号。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.selectFreeVnSSglrID-Union{Tuple{FT}, Tuple{AbstractVector{FT}, Integer}} where FT","page":"API","title":"MoM_Basics.selectFreeVnSSglrID","text":"selectFreeVnSSglrID(uvw::AbstractVector{FT}, i::Integer) where {FT}\n\n根据 uvw 得到第 i 个面所在的基函数的 处理超奇异性 求积时 “自由端( r₀ )” 的序号。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.selectFreeVnSglrID-Union{Tuple{FT}, Tuple{AbstractVector{FT}, Integer}} where FT","page":"API","title":"MoM_Basics.selectFreeVnSglrID","text":"selectFreeVnSglrID(uvw::AbstractVector{FT}, i::Integer) where {FT}\n\n根据 uvw 得到第 i 个面所在的基函数的 处理奇异性 求积时 “自由端( r₀ )” 的序号。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setGeosPermittivity!-Union{Tuple{AbstractVector{VT}}, Tuple{CT}, Tuple{VT}, Tuple{AbstractVector{VT}, CT}} where {VT<:TriangleInfo, CT<:Complex}","page":"API","title":"MoM_Basics.setGeosPermittivity!","text":"setGeosPermittivity!(geosInfo::AbstractVector{VT}, εᵣ::CT = 1.0(1+0im)) where {VT<:TriangleInfo, CT<:Complex}\n\n设置三角形网格介电常数，目前为空派发以方便体面积分方程计算中的多重派发。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setGeosPermittivity!-Union{Tuple{AbstractVector{VT}}, Tuple{CT}, Tuple{VT}, Tuple{AbstractVector{VT}, CT}} where {VT<:VSCellType, CT<:Complex}","page":"API","title":"MoM_Basics.setGeosPermittivity!","text":"setGeosPermittivity!(geosInfo::AbstractVector{VT}, εᵣ::CT = 1.0(1+0im)) where {VT<:VSCellType, CT<:Complex}\nsetGeosPermittivity!(geosInfo::AbstractVector{VT}, εᵣs::T) where {VT<:VSCellType, T<:AbstractVector}\nsetGeosPermittivity!(geosInfo::AbstractVector{VT}, εᵣ::CT = 1.0(1+0im)) where {VT<:AbstractVector, CT<:Complex}\n\n设置四面体、六面体的介电常数 εᵣ ，并同时设置介质对比度，修改此函数以得到对应的数据。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setHexaCoor!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Array{HexahedraInfo{IT, FT, CT}, 1}, HexahedraMesh{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}","page":"API","title":"MoM_Basics.setHexaCoor!","text":"setHexaCoor!( hexasInfo::Vector{HexahedraInfo{IT, FT, CT}}, hexaMeshData::HexahedraMesh{IT, FT}) where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}\n\n在预分配好的六面体数组 hexasInfo 里写入 hexaMeshData 中对应的六面体编号、点坐标、中心位置数据。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setHexaParam!-Union{Tuple{Array{HexahedraInfo{IT, FT, CT}, 1}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}","page":"API","title":"MoM_Basics.setHexaParam!","text":"setHexaParam!(hexasInfo::Vector{HexahedraInfo{IT, FT, CT}}) where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}\n\n计算六面体体积、面外法向量、面积，并写入 hexasInfo 。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setPrecision!-Union{Tuple{Type{T}}, Tuple{T}} where T<:Union{Float32, Float64}","page":"API","title":"MoM_Basics.setPrecision!","text":"setPrecision!(FT::Type{T}) where {T<:Union{Float32, Float64}}\n\n设置仿真精度为 FT。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setQuad4Hexas!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraMesh{IT, FT}, Array{HexahedraInfo{IT, FT, CT}, 1}, Val{:PWC}}} where {IT, FT, CT}","page":"API","title":"MoM_Basics.setQuad4Hexas!","text":"setQuad4Hexas!(hexameshData::HexahedraMesh{IT, FT}, hexasInfo::Vector{HexahedraInfo{IT, FT, CT}}, ::Val{:PWC}) where {IT, FT, CT}\n\n计算构成六面体的所有四边形，并将这些信息写入六面体 hexasInfo，给分片常数 (PWC) 基函数赋值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setQuad4Hexas!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{HexahedraMesh{IT, FT}, Array{HexahedraInfo{IT, FT, CT}, 1}, Val{:RBF}}} where {IT, FT, CT}","page":"API","title":"MoM_Basics.setQuad4Hexas!","text":"setQuad4Hexas!(hexameshData::HexahedraMesh{IT, FT}, hexasInfo::Vector{HexahedraInfo{IT, FT, CT}}, ::Val{:RBF}) where {IT, FT, CT}\n\n计算构成六面体的所有四边形，并写入六面体 hexasInfo，给屋顶基函数 (RBF) 基函数赋值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setTetraCoor!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{Array{TetrahedraInfo{IT, FT, CT}, 1}, MoM_Basics.TetrahedraMesh{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}","page":"API","title":"MoM_Basics.setTetraCoor!","text":"setHexaCoor!( tetrasInfo::Vector{TetrahedraInfo{IT, FT, CT}}, tetraMeshData::TetrahedraMesh{IT, FT}) where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}\n\n在预分配好的四面体数组 tetrasInfo 里写入 tetraMeshData 中对应的四面体编号、点坐标、中心位置数据。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setTetraParam!-Union{Tuple{Array{TetrahedraInfo{IT, FT, CT}, 1}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}","page":"API","title":"MoM_Basics.setTetraParam!","text":"setTetraParam!(tetrasInfo::Vector{TetrahedraInfo{IT, FT, CT}}) where {IT<:Integer, FT<:AbstractFloat, CT<:Complex}\n\n计算四面体体积、面外法向量、面积，并写入 tetrasInfo 。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setTriParam!-Tuple{TriangleInfo}","page":"API","title":"MoM_Basics.setTriParam!","text":"setTriParam!(triangleInfo::TriangleInfo)\n\n计算三角形边长、边外法向量、面法向量、面积，直接写入 triangleInfo 。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setTriangles4Tetras!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{MoM_Basics.TetrahedraMesh{IT, FT}, Array{TetrahedraInfo{IT, FT, CT}, 1}, Val{:PWC}}} where {IT, FT, CT}","page":"API","title":"MoM_Basics.setTriangles4Tetras!","text":"setTriangles4Tetras!(tetrameshData::TetrahedraMesh{IT, FT}, tetrasInfo::Vector{TetrahedraInfo{IT, FT, CT}}, ::Val{:PWC}) where {IT, FT, CT}\n\n计算构成四面体的所有三角形，并将这些信息写入四面体 tetrasInfo，给分片常数 (PWC) 基函数赋值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setTriangles4Tetras!-Union{Tuple{CT}, Tuple{FT}, Tuple{IT}, Tuple{MoM_Basics.TetrahedraMesh{IT, FT}, Array{TetrahedraInfo{IT, FT, CT}, 1}, Val{:SWG}}} where {IT, FT, CT}","page":"API","title":"MoM_Basics.setTriangles4Tetras!","text":"setTriangles4Tetras!(tetrameshData::TetrahedraMesh{IT, FT}, tetrasInfo::Vector{TetrahedraInfo{IT, FT, CT}}, ::Val{:SWG}) where {IT, FT, CT}\n\n计算构成四面体的所有三角形，并将这些信息写入四面体 tetrasInfo，给 SWG 基函数赋值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setTricoor!-Union{Tuple{FT}, Tuple{IT}, Tuple{Array{TriangleInfo{IT, FT}, 1}, TriangleMesh{IT, FT}}} where {IT<:Integer, FT<:AbstractFloat}","page":"API","title":"MoM_Basics.setTricoor!","text":"setTricoor!( trianglesInfo::Vector{TriangleInfo{IT, FT}}, TriangleMeshData::TriangleMesh{IT, FT}) where {IT<:Integer, FT<:AbstractFloat}\n\n在预分配好的三角形数组 trianglesInfo 里写入 TriangleMeshData 中对应的三角形编号、点坐标、中心位置数据。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setdiffArray!","page":"API","title":"MoM_Basics.setdiffArray!","text":"setdiffArray!(ary[, dim = 1])\n\n将阵列天线 ary 在 dim 方向一半单元设置为反相位，从而实现差方向图。\n\n\n\n\n\n","category":"function"},{"location":"api/#MoM_Basics.setδκ!-Union{Tuple{AbstractArray{HexahedraInfo{IT, FT, CT}, 1}}, Tuple{CT}, Tuple{FT}, Tuple{IT}} where {IT<:Integer, FT<:Real, CT<:Complex{FT}}","page":"API","title":"MoM_Basics.setδκ!","text":"setδκ!(hexasInfo::AbstractVector{HexahedraInfo{IT, FT, CT}}) where {IT<:Integer, FT<:Real, CT<:Complex{FT}}\n\n设置六面体网格信息 hexasInfo 中每个面上的介质对比度差值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.setδκ!-Union{Tuple{AbstractVector{VT}}, Tuple{VT}} where VT<:VolumeCellType","page":"API","title":"MoM_Basics.setδκ!","text":"setδκ!(geosInfo::AbstractVector{VT}) where {VT<:VolumeCellType}\n\n设置体网格信息 geosInfo 中每个面上的介质对比度差值。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.show_memory_time","page":"API","title":"MoM_Basics.show_memory_time","text":"show_memory_time(io::IO=Core.stdout; mem_unit = :MB, time_unit = :s)\n\n展示时间内存消耗数据记录。\n\n\n\n\n\n","category":"function"},{"location":"api/#MoM_Basics.sincmath-Tuple{T} where T<:Number","page":"API","title":"MoM_Basics.sincmath","text":"sincmath(x::T) where{T<:Number}\n\nJulia 自带 Base.sinc 函数计算的是归一化辛格函数:\n\nsinc(x)     =   sin(πx)(πx)\n\n此处借用 sinc，定义数学领域的非归一化 sinc 函数，即计算:\n\nsin(x)x\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceEfield-Tuple{PlaneWave, Any}","page":"API","title":"MoM_Basics.sourceEfield","text":"sourceEfield(plw::PlaneWave, r)\n\n计算平面波 plw 在全局坐标下给定位置 r 处的电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceEfield-Union{Tuple{AT}, Tuple{FT}, Tuple{AT, AbstractVector{FT}}} where {FT<:Real, AT<:AbstractAntennaArray}","page":"API","title":"MoM_Basics.sourceEfield","text":"sourceEfield(ary::AT, rvec::AbstractVector{FT}) where {FT<:Real,  AT<:AbstractAntennaArray}\n\n计算天线阵列 ary 在全局坐标下给定位置 rvec 处的电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceEfield-Union{Tuple{FT}, Tuple{MagneticDipole, AbstractVector{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.sourceEfield","text":"sourceEfield(md::MagneticDipole{FT}, r_observe::Vec3D{FT};  r_coortype::Symbol=:C) where {FT<:Real}\n\n计算磁偶极 md 在全局坐标下给定位置 rvec 处的电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceEfield-Union{Tuple{ST}, Tuple{FT}, Tuple{Vector{ST}, AbstractVector{FT}}} where {FT<:Real, ST<:ExcitingSource}","page":"API","title":"MoM_Basics.sourceEfield","text":"sourceEfield(sources::Vector{ST}, rvec::AbstractVector{FT}) where {FT<:Real, ST<:ExcitingSource}\n\n计算源向量 sources 在全局坐标下给定位置 rvec 处的远场电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceFarEfield-Union{Tuple{AT}, Tuple{FT}, Tuple{AT, r̂θϕInfo{FT}}} where {FT<:AbstractFloat, AT<:AbstractAntennaArray}","page":"API","title":"MoM_Basics.sourceFarEfield","text":"sourceFarEfield(ary::AT, r̂θϕ::r̂θϕInfo{FT}) where {FT<:Real, AT<:AbstractAntennaArray}\n\n计算天线阵列 ary 在全局坐标下给定方向 r̂θϕ 的远场电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceFarEfield-Union{Tuple{FT}, Tuple{MagneticDipole, r̂θϕInfo{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.sourceFarEfield","text":"sourceFarEfield(md::MagneticDipole{FT}, r̂θϕ::r̂θϕInfo{FT}) where {FT<:Real}\n\n计算磁偶极 md 在全局坐标下给定方向 r̂θϕ 的远场电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceFarEfield-Union{Tuple{ST}, Tuple{FT}, Tuple{Vector{ST}, r̂θϕInfo{FT}}} where {FT<:Real, ST<:ExcitingSource}","page":"API","title":"MoM_Basics.sourceFarEfield","text":"sourceFarEfield(sources::Vector{ST}, r̂θϕ::r̂θϕInfo{FT}) where {FT<:Real, ST<:ExcitingSource}\n\n计算源向量 sources 在全局坐标下给定方向 r̂θϕ 的远场电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceHfield-Tuple{PlaneWave, Any}","page":"API","title":"MoM_Basics.sourceHfield","text":"sourceHfield(plw::PlaneWave, r)\n\n计算平面波 plw 在全局坐标下给定位置 r 处的磁场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceLocalEfield-Union{Tuple{AT}, Tuple{FT}, Tuple{AT, AbstractVector{FT}}} where {FT<:Real, AT<:AbstractAntennaArray}","page":"API","title":"MoM_Basics.sourceLocalEfield","text":"sourceLocalEfield(ary::AT, rvec::AbstractVector{FT}) where {FT<:Real,  AT<:AbstractAntennaArray}\n\n计算天线阵列 ary 在阵列局部坐标下给定位置 rvec 处的电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceLocalEfield-Union{Tuple{FT}, Tuple{MagneticDipole, AbstractVector{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.sourceLocalEfield","text":"sourceLocalEfield(md::MagneticDipole{FT}, r_observe::Vec3D{FT};  r_coortype::Symbol=:C) where {FT<:Real}\n\n计算磁偶极 md 在磁偶极局部坐标给定位置 rvec 处的电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceLocalFarEfield-Union{Tuple{AT}, Tuple{FT}, Tuple{AT, r̂θϕInfo{FT}}} where {FT<:AbstractFloat, AT<:AbstractAntennaArray}","page":"API","title":"MoM_Basics.sourceLocalFarEfield","text":"sourceLocalFarEfield(ary::AT, r̂θϕ::r̂θϕInfo{FT}) where {FT<:Real, AT<:AbstractAntennaArray}\n\n计算天线阵列 ary 在阵列坐标下给定方向 r̂θϕ 的远场电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sourceLocalFarEfield-Union{Tuple{FT}, Tuple{MagneticDipole, r̂θϕInfo{FT}}} where FT<:Real","page":"API","title":"MoM_Basics.sourceLocalFarEfield","text":"sourceLocalFarEfield(md::MagneticDipole{FT}, r̂θϕ::r̂θϕInfo{FT}) where {FT<:Real}\n\n计算磁偶极 md 在磁偶极局部坐标下给定方向 r̂θϕ 的远场电场。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.sphere2cart-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"API","title":"MoM_Basics.sphere2cart","text":"sphere2cart(coor_sphere::AbstractVector{T}) where T<:Real\nsphere2cart(coor_sphere...)\nsphere2cart(r::T, θϕ::θϕInfo{T}) where T<:Real\n\n将球坐标 coor_sphere 转换到直角坐标。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.updateVSBFTParams!-Tuple{}","page":"API","title":"MoM_Basics.updateVSBFTParams!","text":"updateVSBFTParams!(;sbfT = :nothing, vbfT = :nothing)\n\n通过输入符号更新体、面基函数类型常数实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.updateVSBFTypes!-Tuple{}","page":"API","title":"MoM_Basics.updateVSBFTypes!","text":"updateVSBFTypes!(;sbfType = BasisFunctionType, vbfType = BasisFunctionType)\n\n更新体、面基函数类型常数实例。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.update_orient!-Tuple{AT} where AT<:AbstractAntennaArray","page":"API","title":"MoM_Basics.update_orient!","text":"update_orient!(ary::AT; aryorient, sourceorientlc[, orientunit = :rad]) where {AT<:AbstractAntennaArray}\n\n通过机械旋转更新天线阵列 ary 的阵列指向为 aryorient，天线单元指向为 sourceorientlc，指向角单位为 orientunit 。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.update_orient!-Union{Tuple{FT}, Tuple{MagneticDipole{FT}, Any}, Tuple{MagneticDipole{FT}, Any, Any}} where FT<:Real","page":"API","title":"MoM_Basics.update_orient!","text":"update_orient!(md::MagneticDipole{FT}, orient, unit = :rad) where {FT <: Real}\n\n更新磁偶极 md 指向为 orient。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.update_phase!-Union{Tuple{AT}, Tuple{AT, Any}} where AT<:AbstractAntennaArray","page":"API","title":"MoM_Basics.update_phase!","text":"update_phase!(ary::AT, phase) where {AT<:AbstractAntennaArray}\n\n更新指向相位\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.update_phase!-Union{Tuple{FT}, Tuple{MagneticDipole{FT}, Any}} where FT<:Real","page":"API","title":"MoM_Basics.update_phase!","text":"update_phase!(md::MagneticDipole{FT}, phase) where {FT <: Real}\n\n设置磁偶极 md 的相位为 phase。\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.θϕInfofromCart-Union{Tuple{AbstractVector{FT}}, Tuple{FT}} where FT<:Real","page":"API","title":"MoM_Basics.θϕInfofromCart","text":"θϕInfofromCart(rvec::Vec3D{FT}) where {FT<:Real}\n\n从直角坐标 rvec 计算三角函数：sinθ cosθ sinϕ cosϕ\n\n\n\n\n\n","category":"method"},{"location":"api/#MoM_Basics.@clock-Tuple{Any, Any}","page":"API","title":"MoM_Basics.@clock","text":"clock(message, ex)\n\n将表达式 ex 的运行时间以 message 为键保存在字典 timer 中。\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using MoM_MPI\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: MoM)","category":"page"},{"location":"#MoM_MPI","page":"Home","title":"MoM_MPI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: star)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Size) (Image: Downloads) (Image: License)","category":"page"},{"location":"#介绍","page":"Home","title":"介绍","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"提供 CEM_MoMs ((Image: github), (Image: gitee)) 包的 MPI 并行扩展算法，包括各类基函数的矩阵元计算、多层快速多极子（MLFMA）各种类型和函数、求解器等功能。 CEM_MoMs 本身被拆分为几个独立的包以方便开发时快速编译，同时避免在无图形化界面使用时调入绘图相关包而导致报错。","category":"page"},{"location":"#安装与测试","page":"Home","title":"安装与测试","text":"","category":"section"},{"location":"#安装","page":"Home","title":"安装","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"可直接在 Julia REPL 的包管理模式中安装：","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Pkg.add(\"MoM_MPI\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"或","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add MoM_MPI","category":"page"},{"location":"#测试","page":"Home","title":"测试","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"同样可直接在 Julia REPL 的包管理模式中测试包：","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Pkg.test(\"MoM_MPI\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"或","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add MoM_MPI","category":"page"}]
}
